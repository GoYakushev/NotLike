import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from bot.config import config
from core.database.database import Database
from services.wallet.wallet_service import WalletService
from bot.handlers.spot_handler import show_spot_menu, search_token, show_token_info, SpotStates, register_spot_handlers
from bot.handlers.p2p_handler import show_p2p_menu, P2PStates, show_p2p_ads, register_p2p_handlers
from bot.handlers.copytrading_handler import show_copytrading_menu, show_top_traders, CopyTradingStates
from bot.handlers.swap_handler import show_swap_menu, start_swap, process_swap_amount, SwapStates
from bot.handlers.admin_handler import show_admin_menu, show_statistics, AdminStates, broadcast_message, process_broadcast_message
from utils.notifications import NotificationManager
from bot.handlers.support_handler import show_support_menu, start_ticket_creation, process_ticket_subject, process_ticket_message, SupportStates
from bot.handlers.referral_handler import show_referral_menu, get_referral_link, show_referral_stats
from services.statistics.stats_service import StatsService
from services.fees.fee_service import FeeService
import aioschedule
from services.security.security_service import SecurityService
from services.backup.backup_service import BackupService
from services.notifications.notification_service import NotificationService, NotificationType
from services.copytrading.copytrading_service import CopyTradingService

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()
wallet_service = WalletService()
copytrading_service = CopyTradingService(db, NotificationService(bot))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NotificationManager
notification_manager = NotificationManager(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
stats_service = StatsService()
fee_service = FeeService()

# –î–æ–±–∞–≤–∏–º —Å–µ—Ä–≤–∏—Å—ã
security_service = SecurityService()
backup_service = BackupService(bot, config.YANDEX_DISK_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService(bot)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    session = db.get_session()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        session.add(new_user)
        session.commit()
        
        welcome_text = (
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Not Like Trading Bot!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìà –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ\n"
            "üë• –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ P2P —Ç–æ—Ä–≥–æ–≤–ª–µ\n"
            "üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏\n"
            "üîÑ –°–æ–≤–µ—Ä—à–∞—Ç—å —Å–≤–æ–ø—ã –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏\n\n"
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /terms"
        )
    else:
        welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet"),
        types.InlineKeyboardButton("üìä –°–ø–æ—Ç", callback_data="spot")
    )
    keyboard.add(
        types.InlineKeyboardButton("üë• P2P", callback_data="p2p"),
        types.InlineKeyboardButton("üîÑ –°–≤–æ–ø", callback_data="swap")
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "wallet":
        await show_wallet(callback_query.message)
    elif callback_query.data == "spot":
        await show_spot(callback_query.message)
    elif callback_query.data == "p2p":
        await show_p2p(callback_query.message)
    elif callback_query.data == "swap":
        await show_swap(callback_query.message)

async def show_wallet(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        balances = await wallet_service.get_balances(message.from_user.id)
        
        text = "üíº –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n\n"
        for network, balance in balances.items():
            text += f"{network}: {balance:.4f}\n"
            
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
            types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
        )
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–∞—Ö")

async def show_spot(message: types.Message):
    await show_spot_menu(message)

async def show_p2p(message: types.Message):
    await show_p2p_menu(message)

async def show_swap(message: types.Message):
    await show_swap_menu(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp.register_message_handler(search_token, state=SpotStates.choosing_token)
dp.register_message_handler(show_token_info, state=SpotStates.entering_amount)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ P2P callback'–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('p2p_'))
async def process_p2p_callback(callback_query: types.CallbackQuery):
    action = callback_query.data.split('_')[1]
    if action == 'buy':
        await show_p2p_ads(callback_query, 'SELL')
    elif action == 'sell':
        await show_p2p_ads(callback_query, 'BUY')
    elif action == 'menu':
        await show_p2p_menu(callback_query.message)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.register_callback_query_handler(
    lambda c: c.data.startswith('swap_'),
    lambda c: not c.data == 'swap_history',
    state=None
)
dp.register_message_handler(process_swap_amount, state=SwapStates.entering_amount)

# –ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥
dp.register_callback_query_handler(show_top_traders, lambda c: c.data == 'top_traders')

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    await show_admin_menu(message)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏
dp.register_callback_query_handler(show_statistics, lambda c: c.data == "admin_stats")
dp.register_callback_query_handler(show_admin_menu, lambda c: c.data == "admin_menu")
dp.register_callback_query_handler(broadcast_message, lambda c: c.data == "admin_broadcast")
dp.register_message_handler(process_broadcast_message, state=AdminStates.waiting_for_message)

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(commands=['support'])
async def support_command(message: types.Message):
    await show_support_menu(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
dp.register_callback_query_handler(start_ticket_creation, lambda c: c.data == "create_ticket")
dp.register_message_handler(process_ticket_subject, state=SupportStates.waiting_for_subject)
dp.register_message_handler(process_ticket_message, state=SupportStates.waiting_for_message)

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message_handler(commands=['referral'])
async def referral_command(message: types.Message):
    await show_referral_menu(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
dp.register_callback_query_handler(get_referral_link, lambda c: c.data == "get_ref_link")
dp.register_callback_query_handler(show_referral_stats, lambda c: c.data == "ref_stats")

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['stats'])
async def show_global_stats(message: types.Message):
    stats = await stats_service.get_global_stats()
    
    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
        
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n\n"
        f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${stats['total_volume_24h']:,.2f}\n"
        f"üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions_24h']}\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users_24h']}\n\n"
        "üî∏ –î–µ—Ç–∞–ª–∏:\n"
        f"‚Ä¢ –°–ø–æ—Ç: ${stats['details']['spot']['volume']:,.2f} ({stats['details']['spot']['count']} —Å–¥–µ–ª–æ–∫)\n"
        f"‚Ä¢ P2P: ${stats['details']['p2p']['volume']:,.2f} ({stats['details']['p2p']['count']} —Å–¥–µ–ª–æ–∫)\n"
        f"‚Ä¢ –°–≤–æ–ø—ã: ${stats['details']['swap']['volume']:,.2f} ({stats['details']['swap']['count']} —Å–¥–µ–ª–æ–∫)"
    )
    
    await message.answer(text)

# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
async def check_fees():
    message = fee_service.get_fee_message()
    if message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = await get_all_users()
        for user in users:
            try:
                await bot.send_message(user.telegram_id, message)
                await asyncio.sleep(0.1)  # –ò–∑–±–µ–≥–∞–µ–º —Ñ–ª—É–¥–∞
            except Exception as e:
                print(f"Error sending fee message to {user.telegram_id}: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
aioschedule.every().day.at("00:00").do(check_fees)

async def scheduler():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

# –î–æ–±–∞–≤–∏–º middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@dp.middleware_handler()
async def security_middleware(handler, event, data):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if not security_service.check_rate_limit(
        event.from_user.id,
        event.text if hasattr(event, 'text') else 'action'
    ):
        await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return
        
    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    if hasattr(event, 'text'):
        event.text = security_service.sanitize_input(event.text)
        
    return await handler(event, data)

# –û–±–Ω–æ–≤–ª—è–µ–º main()
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notification_service.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.create_task(backup_service.start_backup_scheduler())
    asyncio.create_task(scheduler())
    register_p2p_handlers(dp) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º p2p —Ö–µ–Ω–¥–ª–µ—Ä—ã
    register_spot_handlers(dp) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º spot —Ö–µ–Ω–¥–ª–µ—Ä—ã
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main()) 