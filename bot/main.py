import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from bot.config import config
from core.database.database import Database
from core.database.models import User
from services.wallet.wallet_service import WalletService
from bot.handlers.spot_handler import show_spot_menu, search_token, show_token_info, SpotStates, register_spot_handlers, get_token_price
from bot.handlers.p2p_handler import show_p2p_menu, P2PStates, show_p2p_ads, register_p2p_handlers, check_expired_orders, initialize_p2p_service
from bot.handlers.copytrading_handler import show_copytrading_menu, show_top_traders, CopyTradingStates
from bot.handlers.swap_handler import show_swap_menu, start_swap, process_swap_amount, SwapStates
from bot.handlers.admin_handler import show_admin_menu, show_statistics, AdminStates, broadcast_message, process_broadcast_message
from services.notifications.notification_service import NotificationService, NotificationType
from bot.handlers.support_handler import show_support_menu, start_ticket_creation, process_ticket_subject, process_ticket_message, SupportStates
from bot.handlers.referral_handler import show_referral_menu, get_referral_link, show_referral_stats
from services.statistics.stats_service import StatsService
from services.fees.fee_service import FeeService
import aioschedule
from services.security.security_service import SecurityService
from services.backup.backup_service import BackupService
from services.copytrading.copytrading_service import CopyTradingService
from services.p2p.p2p_service import P2PService
from datetime import datetime
from typing import Optional, List
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv #  –ò–º–ø–æ—Ä—Ç load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
def load_config():
    load_dotenv() #  –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
    config = {}
    config['bot_token'] = os.environ.get('BOT_TOKEN')
    config['api_key'] = os.environ.get('API_KEY')
    config['api_secret'] = os.environ.get('API_SECRET')
    config['yandex_disk_token'] = os.environ.get('YANDEX_DISK_TOKEN')
    config['encryption_key'] = os.environ.get('ENCRYPTION_KEY') #  –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    # ... –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ...
    if not config['bot_token'] or not config['api_key'] or not config['api_secret']:
        raise ValueError("Bot token, API key and secret must be set in .env file.") #  –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return config

async def main():
    try:
        config = load_config()
        logging.info("Configuration loaded successfully.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(token=config['bot_token'])
        storage = MemoryStorage()
        dp = Dispatcher(bot, storage=storage)
        db = Database()
        wallet_service = WalletService()
        copytrading_service = CopyTradingService(db, NotificationService(bot))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NotificationManager
        notification_service = NotificationService(bot)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        stats_service = StatsService()
        fee_service = FeeService()

        # –î–æ–±–∞–≤–∏–º —Å–µ—Ä–≤–∏—Å—ã
        security_service = SecurityService()
        backup_service = BackupService(bot, config['yandex_disk_token'])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º P2P —Å–µ—Ä–≤–∏—Å
        p2p_service = P2PService(db, notification_service)

        class WithdrawStates(StatesGroup):
            waiting_for_address = State()
            waiting_for_amount = State()
            waiting_for_confirmation = State()

        @dp.message_handler(commands=['start'])
        async def start_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            session = db.get_session()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
                
                if not user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_user = User(
                        telegram_id=message.from_user.id,
                        username=message.from_user.username,
                        full_name=message.from_user.full_name,
                        language_code=message.from_user.language_code,
                        registration_date=datetime.utcnow(),
                        last_login_date=datetime.utcnow()
                    )
                    session.add(new_user)
                    session.commit()
                    
                    welcome_text = (
                        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Not Like Trading Bot!\n\n"
                        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                        "üìà –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ\n"
                        "üë• –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ P2P —Ç–æ—Ä–≥–æ–≤–ª–µ\n"
                        "üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏\n"
                        "üîÑ –°–æ–≤–µ—Ä—à–∞—Ç—å —Å–≤–æ–ø—ã –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏\n\n"
                        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /terms"
                    )
                    logger.info(f"New user registered: {message.from_user.id}")
                else:
                    user.last_login_date = datetime.utcnow()
                    session.commit()
                    welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                    logger.info(f"User logged in: {message.from_user.id}")
                
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    types.InlineKeyboardButton("üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet"),
                    types.InlineKeyboardButton("üìä –°–ø–æ—Ç", callback_data="spot"),
                    types.InlineKeyboardButton("üë• P2P", callback_data="p2p"),
                    types.InlineKeyboardButton("üîÑ –°–≤–æ–ø", callback_data="swap")
                )
                
                await message.answer(welcome_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error in start_handler for user {message.from_user.id}: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                session.rollback()
            finally:
                session.close()

        @dp.callback_query_handler(lambda c: c.data in ["wallet", "spot", "p2p", "swap", "main_menu"])
        async def process_main_menu_callback(callback_query: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö callback-–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
                await callback_query.answer()
                
                if callback_query.data == "main_menu":
                    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    keyboard = types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(
                        types.InlineKeyboardButton("üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet"),
                        types.InlineKeyboardButton("üìä –°–ø–æ—Ç", callback_data="spot"),
                        types.InlineKeyboardButton("üë• P2P", callback_data="p2p"),
                        types.InlineKeyboardButton("üîÑ –°–≤–æ–ø", callback_data="swap")
                    )
                    await callback_query.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                        reply_markup=keyboard
                    )
                    return

                # –ú–∞–ø–ø–∏–Ω–≥ callback_data –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
                handlers = {
                    "wallet": show_wallet,
                    "spot": show_spot,
                    "p2p": show_p2p,
                    "swap": show_swap
                }
                
                handler = handlers.get(callback_query.data)
                if handler:
                    await handler(callback_query.message)
                
            except Exception as e:
                logger.error(
                    f"Error in process_main_menu_callback for user {callback_query.from_user.id}, "
                    f"callback: {callback_query.data}, error: {str(e)}", 
                    exc_info=True
                )
                await callback_query.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        @dp.callback_query_handler(lambda c: c.data in ["deposit", "withdraw", "refresh_balance"])
        async def process_wallet_callback(callback_query: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –∫–æ—à–µ–ª—å–∫–∞"""
            try:
                await callback_query.answer()
                
                if callback_query.data == "refresh_balance":
                    await show_wallet(callback_query.message)
                elif callback_query.data == "deposit":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É
                    await show_deposit_instructions(callback_query.message)
                elif callback_query.data == "withdraw":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—ã–≤–æ–¥–∞
                    await show_withdrawal_form(callback_query.message)
                    
            except Exception as e:
                logger.error(
                    f"Error in process_wallet_callback for user {callback_query.from_user.id}, "
                    f"callback: {callback_query.data}, error: {str(e)}", 
                    exc_info=True
                )
                await callback_query.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        async def show_wallet(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                balances = await wallet_service.get_balances(message.from_user.id)
                
                text = "üíº –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n\n"
                for network, balance in balances.items():
                    text += f"{network}: {balance:.4f}\n"
                    
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
                    types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
                )
                keyboard.add(
                    types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance"),
                    types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                )
                
                await message.answer(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error in show_wallet for user {message.from_user.id}: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–∞—Ö")

        async def show_spot(message: types.Message):
            await show_spot_menu(message)

        async def show_p2p(message: types.Message):
            await show_p2p_menu(message)

        async def show_swap(message: types.Message):
            await show_swap_menu(message)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.register_message_handler(search_token, state=SpotStates.choosing_token)
        dp.register_message_handler(show_token_info, state=SpotStates.entering_amount)

        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ P2P callback'–æ–≤
        @dp.callback_query_handler(lambda c: c.data.startswith('p2p_'))
        async def process_p2p_callback(callback_query: types.CallbackQuery):
            action = callback_query.data.split('_')[1]
            if action == 'buy':
                await show_p2p_ads(callback_query, 'SELL')
            elif action == 'sell':
                await show_p2p_ads(callback_query, 'BUY')
            elif action == 'menu':
                await show_p2p_menu(callback_query.message)

        # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.register_callback_query_handler(
            lambda c: c.data.startswith('swap_'),
            lambda c: not c.data == 'swap_history',
            state=None
        )
        dp.register_message_handler(process_swap_amount, state=SwapStates.entering_amount)

        # –ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥
        dp.register_callback_query_handler(show_top_traders, lambda c: c.data == 'top_traders')

        # –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        @dp.message_handler(commands=['admin'])
        async def admin_command(message: types.Message):
            await show_admin_menu(message)

        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏
        dp.register_callback_query_handler(show_statistics, lambda c: c.data == "admin_stats")
        dp.register_callback_query_handler(show_admin_menu, lambda c: c.data == "admin_menu")
        dp.register_callback_query_handler(broadcast_message, lambda c: c.data == "admin_broadcast")
        dp.register_message_handler(process_broadcast_message, state=AdminStates.waiting_for_message)

        # –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        @dp.message_handler(commands=['support'])
        async def support_command(message: types.Message):
            await show_support_menu(message)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        dp.register_callback_query_handler(start_ticket_creation, lambda c: c.data == "create_ticket")
        dp.register_message_handler(process_ticket_subject, state=SupportStates.waiting_for_subject)
        dp.register_message_handler(process_ticket_message, state=SupportStates.waiting_for_message)

        # –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        @dp.message_handler(commands=['referral'])
        async def referral_command(message: types.Message):
            await show_referral_menu(message)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        dp.register_callback_query_handler(get_referral_link, lambda c: c.data == "get_ref_link")
        dp.register_callback_query_handler(show_referral_stats, lambda c: c.data == "ref_stats")

        # –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        @dp.message_handler(commands=['stats'])
        async def show_global_stats(message: types.Message):
            stats = await stats_service.get_global_stats()
            
            if not stats:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n\n"
                f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${stats['total_volume_24h']:,.2f}\n"
                f"üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions_24h']}\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users_24h']}\n\n"
                "üî∏ –î–µ—Ç–∞–ª–∏:\n"
                f"‚Ä¢ –°–ø–æ—Ç: ${stats['details']['spot']['volume']:,.2f} ({stats['details']['spot']['count']} —Å–¥–µ–ª–æ–∫)\n"
                f"‚Ä¢ P2P: ${stats['details']['p2p']['volume']:,.2f} ({stats['details']['p2p']['count']} —Å–¥–µ–ª–æ–∫)\n"
                f"‚Ä¢ –°–≤–æ–ø—ã: ${stats['details']['swap']['volume']:,.2f} ({stats['details']['swap']['count']} —Å–¥–µ–ª–æ–∫)"
            )
            
            await message.answer(text)

        async def get_all_users():
            """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
            session = db.get_session()
            try:
                users = session.query(User).all()
                return users
            except Exception as e:
                logger.error(f"Error getting all users: {str(e)}", exc_info=True)
                return []
            finally:
                session.close()

        # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
        async def check_fees():
            try:
                message = fee_service.get_fee_message()
                if message:
                    users = await get_all_users()
                    for user in users:
                        try:
                            await bot.send_message(user.telegram_id, message)
                            await asyncio.sleep(0.1)  # –ò–∑–±–µ–≥–∞–µ–º —Ñ–ª—É–¥–∞
                        except Exception as e:
                            logger.error(f"Error sending fee message to {user.telegram_id}: {str(e)}")
            except Exception as e:
                logger.error(f"Error in check_fees: {str(e)}", exc_info=True)

        async def scheduler():
            """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö P2P –æ—Ä–¥–µ—Ä–æ–≤
                aioschedule.every(1).minutes.do(check_expired_orders)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
                aioschedule.every().day.at("00:00").do(check_fees)
                
                # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                aioschedule.every(6).hours.do(backup_service.create_backup)
                
                while True:
                    try:
                        await aioschedule.run_pending()
                        await asyncio.sleep(1)
                    except Exception as e:
                        logger.error(f"Error in scheduler iteration: {str(e)}", exc_info=True)
                        await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except Exception as e:
                logger.error(f"Critical error in scheduler: {str(e)}", exc_info=True)

        async def shutdown(dispatcher: Dispatcher):
            """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
            try:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                aioschedule.clear()
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
                session = db.get_session()
                session.close()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                admins = await get_admin_users()
                for admin in admins:
                    try:
                        await bot.send_message(
                            admin.telegram_id,
                            "‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin.telegram_id}: {str(e)}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await dispatcher.storage.close()
                await dispatcher.storage.wait_closed()
                
                logger.info("Bot shutdown completed successfully")
            except Exception as e:
                logger.error(f"Error during shutdown: {str(e)}", exc_info=True)

        async def get_admin_users() -> List[User]:
            """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
            session = db.get_session()
            try:
                return session.query(User).filter_by(is_admin=True).all()
            except Exception as e:
                logger.error(f"Error getting admin users: {str(e)}", exc_info=True)
                return []
            finally:
                session.close()

        # –î–æ–±–∞–≤–∏–º middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        @dp.middleware_handler()
        async def security_middleware(handler, event, data):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
            if not security_service.check_rate_limit(
                event.from_user.id,
                event.text if hasattr(event, 'text') else 'action'
            ):
                await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            if hasattr(event, 'text'):
                event.text = security_service.sanitize_input(event.text)
            
            return await handler(event, data)

        async def show_deposit_instructions(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É"""
            try:
                session = db.get_session()
                user = await get_user_from_message(message, session)
                if not user:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
                wallets = await wallet_service.get_or_create_wallets(user.id)
                
                text = "üì• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:\n\n"
                for network, wallet in wallets.items():
                    text += f"üî∏ {network}:\n"
                    text += f"–ê–¥—Ä–µ—Å: `{wallet['address']}`\n\n"
                
                text += "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
                text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã\n"
                text += "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 1 USDT\n"
                text += "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ 10 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ —Å–µ—Ç–∏\n"
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance"),
                    types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet")
                )
                
                await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
                
            except Exception as e:
                logger.error(f"Error in show_deposit_instructions for user {message.from_user.id}: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            finally:
                if 'session' in locals():
                    session.close()

        async def show_withdrawal_form(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
            try:
                session = db.get_session()
                user = await get_user_from_message(message, session)
                if not user:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                    return

                balances = await wallet_service.get_balances(user.id)
                if not balances or all(balance == 0 for balance in balances.values()):
                    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
                    return

                text = "üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:\n"
                for network, balance in balances.items():
                    text += f"{network}: {balance:.4f}\n"
                
                text += "\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT\n"
                text += "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: 1 USDT\n\n"
                text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞:"

                keyboard = types.InlineKeyboardMarkup(row_width=2)
                for network in balances.keys():
                    if balances[network] > 0:
                        keyboard.add(types.InlineKeyboardButton(
                            f"üì§ {network}", 
                            callback_data=f"withdraw_{network}"
                        ))
                
                keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet"))
                
                await message.answer(text, reply_markup=keyboard)
                
            except Exception as e:
                logger.error(f"Error in show_withdrawal_form for user {message.from_user.id}: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã –≤—ã–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            finally:
                if 'session' in locals():
                    session.close()

        async def get_user_from_message(message: types.Message, session) -> Optional[User]:
            """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
            try:
                return session.query(User).filter_by(telegram_id=message.from_user.id).first()
            except Exception as e:
                logger.error(f"Error getting user from message: {str(e)}", exc_info=True)
                return None

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        @dp.callback_query_handler(lambda c: c.data.startswith('withdraw_'))
        async def process_withdraw_network(callback_query: types.CallbackQuery, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
            try:
                await callback_query.answer()
                network = callback_query.data.split('_')[1]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                async with state.proxy() as data:
                    data['network'] = network
                
                await WithdrawStates.waiting_for_address.set()
                
                text = f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ {network} –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw"))
                
                await callback_query.message.answer(text, reply_markup=keyboard)
                
            except Exception as e:
                logger.error(f"Error in process_withdraw_network: {str(e)}", exc_info=True)
                await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @dp.message_handler(state=WithdrawStates.waiting_for_address)
        async def process_withdraw_address(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
            try:
                address = message.text.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
                async with state.proxy() as data:
                    network = data['network']
                    if not wallet_service.validate_address(address, network):
                        await message.answer(
                            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ç–∏ {network}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        )
                        return
                    
                    data['address'] = address
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                balance = await wallet_service.get_network_balance(message.from_user.id, network)
                
                await WithdrawStates.waiting_for_amount.set()
                
                text = (
                    f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance:.4f} {network}\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USDT\n"
                    f"–ö–æ–º–∏—Å—Å–∏—è: 1 USDT\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
                )
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë ({balance:.4f})", 
                                             callback_data=f"withdraw_all_{balance}")
                )
                keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw"))
                
                await message.answer(text, reply_markup=keyboard)
                
            except Exception as e:
                logger.error(f"Error in process_withdraw_address: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.finish()

        @dp.message_handler(state=WithdrawStates.waiting_for_amount)
        async def process_withdraw_amount(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
            try:
                amount = float(message.text.strip())
                
                async with state.proxy() as data:
                    network = data['network']
                    address = data['address']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                    balance = await wallet_service.get_network_balance(message.from_user.id, network)
                    
                    if amount < 10:
                        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT")
                        return
                        
                    if amount + 1 > balance:  # +1 –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
                        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏")
                        return
                    
                    data['amount'] = amount
                    
                await WithdrawStates.waiting_for_confirmation.set()
                
                text = (
                    f"üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
                    f"–°–µ—Ç—å: {network}\n"
                    f"–ê–¥—Ä–µ—Å: `{address}`\n"
                    f"–°—É–º–º–∞: {amount:.4f} USDT\n"
                    f"–ö–æ–º–∏—Å—Å–∏—è: 1 USDT\n"
                    f"–ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {(amount - 1):.4f} USDT\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!"
                )
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_withdraw"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_withdraw")
                )
                
                await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
                
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            except Exception as e:
                logger.error(f"Error in process_withdraw_amount: {str(e)}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.finish()

        @dp.callback_query_handler(lambda c: c.data == "confirm_withdraw", state=WithdrawStates.waiting_for_confirmation)
        async def process_withdraw_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞"""
            try:
                async with state.proxy() as data:
                    network = data['network']
                    address = data['address']
                    amount = data['amount']
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
                    transaction = await wallet_service.create_withdrawal(
                        user_id=callback_query.from_user.id,
                        network=network,
                        address=address,
                        amount=amount
                    )
                    
                    if transaction:
                        text = (
                            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction.transaction_hash}`\n"
                            f"–°—Ç–∞—Ç—É—Å: {transaction.status}\n\n"
                            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞."
                        )
                        await callback_query.message.answer(text, parse_mode="Markdown")
                    else:
                        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥")
                        
            except Exception as e:
                logger.error(f"Error in process_withdraw_confirmation: {str(e)}", exc_info=True)
                await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞")
            finally:
                await state.finish()

        @dp.callback_query_handler(lambda c: c.data == "cancel_withdraw", state="*")
        async def cancel_withdraw(callback_query: types.CallbackQuery, state: FSMContext):
            """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
            await state.finish()
            await callback_query.answer("–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω")
            await show_wallet(callback_query.message)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await notification_service.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        scheduler_task = asyncio.create_task(scheduler())
        backup_task = asyncio.create_task(backup_service.start_backup_scheduler())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_p2p_handlers(dp)
        register_spot_handlers(dp)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price
        dp.register_message_handler(get_token_price, commands=['price'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot started successfully")
        
        try:
            await dp.start_polling()
        finally:
            await shutdown(dp)
            scheduler_task.cancel()
            backup_task.cancel()
            
    except ValueError as ve:
        logging.error(f"Configuration error: {ve}")
    except Exception as e:
        logger.exception("An unexpected error occurred:")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Critical error: {str(e)}", exc_info=True)
    finally:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
        if 'session' in locals():
            session.close()
        logger.info("Bot shutdown completed") 