from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from services.copytrading.copytrading_service import CopyTradingService
from core.database.models import CopyTrader, CopyTraderFollower  #  CopyTrader, CopyTraderFollower

class CopyTradingStates(StatesGroup):
    entering_amount = State()

copytrading_service = CopyTradingService()

async def show_copytrading_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üë• –¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤", callback_data="top_traders"),
        types.InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")
    )
    keyboard.add(
        types.InlineKeyboardButton("üìà –°—Ç–∞—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–º", callback_data="become_trader")
    )
    
    await message.answer(
        "üìä –ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
        "‚Ä¢ –°—Ç–∞—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ",
        reply_markup=keyboard
    )

async def show_top_traders(callback_query: types.CallbackQuery):
    session = copytrading_service.db.get_session()
    traders = session.query(CopyTrader).order_by(CopyTrader.monthly_profit.desc()).limit(15).all()
    
    text = "üèÜ –¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤:\n\n"
    for i, trader in enumerate(traders, 1):
        success_rate = (trader.successful_trades / trader.total_trades * 100) if trader.total_trades > 0 else 0
        text += (
            f"{i}. @{trader.user.username}\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: {trader.monthly_profit:.2f}%\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {trader.followers_count}\n\n"
        )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="copytrading_menu"))
    
    await callback_query.message.answer(text, reply_markup=keyboard) 

async def become_trader(callback_query: types.CallbackQuery):
    result = await copytrading_service.register_as_trader(callback_query.from_user.id)

    if result['success']:
        await callback_query.message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä!\n"
            "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏."
        )
    else:
        await callback_query.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['error']}"
        )

async def follow_trader_start(callback_query: types.CallbackQuery, state: FSMContext):
    await CopyTradingStates.entering_amount.set()
    await state.update_data(trader_id=int(callback_query.data.split('_')[2]))  #  ID
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")

async def process_follow_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        data = await state.get_data()
        trader_id = data['trader_id']

        result = await copytrading_service.follow_trader(message.from_user.id, trader_id, amount)

        if result['success']:
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

        await state.finish()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è).")

async def my_subscriptions(callback_query: types.CallbackQuery):
    session = copytrading_service.db.get_session()
    subscriptions = session.query(CopyTraderFollower).filter_by(follower_id=callback_query.from_user.id, active=True).all()

    if not subscriptions:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    text = "üìä –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    for sub in subscriptions:
        trader = sub.trader.user  #  User
        text += (
            f"üë§ –¢—Ä–µ–π–¥–µ—Ä: @{trader.username}\n"
            f"üí∞ –°—É–º–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {sub.copy_amount:.2f}\n\n"
        )

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="copytrading_menu"))

    await callback_query.message.answer(text, reply_markup=keyboard)

async def unfollow_trader_handler(callback_query: types.CallbackQuery):
    trader_id = int(callback_query.data.split('_')[2])
    result = await copytrading_service.unfollow_trader(callback_query.from_user.id, trader_id)

    if result['success']:
        await callback_query.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.")
    else:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}") 