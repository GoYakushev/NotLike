from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from core.database.models import NotificationSettings
from services.notifications.notification_service import NotificationType

class NotificationStates(StatesGroup):
    choosing_type = State()
    choosing_channels = State()

async def show_notification_settings(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for notification_type in vars(NotificationType).items():
        if not notification_type[0].startswith('_'):
            keyboard.add(types.InlineKeyboardButton(
                f"‚öôÔ∏è {notification_type[0].replace('_', ' ').title()}",
                callback_data=f"notif_settings_{notification_type[1]}"
            ))
            
    await message.answer(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard
    )

async def show_type_settings(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_type = callback_query.data.split('_')[2]
    
    session = db.get_session()
    settings = session.query(NotificationSettings)\
        .filter_by(user_id=callback_query.from_user.id).first()
        
    if not settings:
        settings = NotificationSettings(
            user_id=callback_query.from_user.id,
            settings='{}'
        )
        session.add(settings)
        session.commit()
        
    enabled = settings.is_enabled(notification_type)
    channels = settings.get_channels(notification_type)
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ",
            callback_data=f"notif_toggle_{notification_type}"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    for channel in ['telegram', 'email']:
        status = "‚úÖ" if channel in channels else "‚ùå"
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {channel.title()}",
            callback_data=f"notif_channel_{notification_type}_{channel}"
        ))
        
    keyboard.add(types.InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥",
        callback_data="notif_back"
    ))
    
    await callback_query.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_type.replace('_', ' ').title()}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–æ' if enabled else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        f"–ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {', '.join(channels)}",
        reply_markup=keyboard
    ) 