from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from core.database.models import SupportTicket, User
from core.database.database import Database
from services.support.support_service import (
    SupportService,
    TicketCategory,
    TicketPriority,
    TicketStatus
)
import logging

db = Database()
logger = logging.getLogger(__name__)

class SupportStates(StatesGroup):
    choosing_category = State()
    entering_subject = State()
    entering_message = State()
    viewing_ticket = State()
    replying_ticket = State()

async def show_support_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
            callback_data="support_create"
        ),
        types.InlineKeyboardButton(
            "üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã",
            callback_data="support_list"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚ùì FAQ",
            callback_data="support_faq"
        ),
        types.InlineKeyboardButton(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
            callback_data="support_contacts"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="main_menu"
        )
    )

    await message.answer(
        "üõ† –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NotLike3\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def process_support_callback(
    callback_query: types.CallbackQuery,
    state: FSMContext,
    support_service: SupportService
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    action = callback_query.data.split('_')[1]

    if action == "create":
        await start_ticket_creation(callback_query.message, state)
    elif action == "list":
        await show_ticket_list(callback_query.message, support_service)
    elif action == "faq":
        await show_faq(callback_query.message)
    elif action == "contacts":
        await show_contacts(callback_query.message)
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def start_ticket_creation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
            callback_data=f"ticket_category_{TicketCategory.TECHNICAL}"
        ),
        types.InlineKeyboardButton(
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            callback_data=f"ticket_category_{TicketCategory.FINANCIAL}"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            callback_data=f"ticket_category_{TicketCategory.SECURITY}"
        ),
        types.InlineKeyboardButton(
            "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            callback_data=f"ticket_category_{TicketCategory.FEATURE_REQUEST}"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
            callback_data=f"ticket_category_{TicketCategory.GENERAL}"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="support_menu"
        )
    )

    await message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await SupportStates.choosing_category.set()

async def process_category_selection(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞."""
    category = callback_query.data.split('_')[2]
    await state.update_data(category=category)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="support_create"
        )
    )

    await callback_query.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await SupportStates.entering_subject.set()

async def process_subject(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã —Ç–∏–∫–µ—Ç–∞."""
    await state.update_data(subject=message.text)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="support_create"
        )
    )

    await message.answer(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=keyboard
    )
    await SupportStates.entering_message.set()

async def process_message(
    message: types.Message,
    state: FSMContext,
    support_service: SupportService
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç."""
    user_data = await state.get_data()
    
    try:
        ticket = await support_service.create_ticket(
            user_id=message.from_user.id,
            subject=user_data['subject'],
            message=message.text,
            category=user_data['category']
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç",
                callback_data=f"ticket_view_{ticket['ticket_id']}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –í –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                callback_data="support_menu"
            )
        )

        await message.answer(
            "‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: #{ticket['ticket_id']}\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=keyboard
        )
        await state.finish()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.finish()

async def show_ticket_list(
    message: types.Message,
    support_service: SupportService
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        tickets = await support_service.get_user_tickets(
            message.from_user.id
        )

        if not tickets:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
                    callback_data="support_create"
                ),
                types.InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="support_menu"
                )
            )

            await message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.",
                reply_markup=keyboard
            )
            return

        keyboard = types.InlineKeyboardMarkup()
        for ticket in tickets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            status_emoji = {
                TicketStatus.NEW: "üÜï",
                TicketStatus.IN_PROGRESS: "‚è≥",
                TicketStatus.WAITING_USER: "üë§",
                TicketStatus.WAITING_ADMIN: "üë®‚Äçüíº",
                TicketStatus.RESOLVED: "‚úÖ",
                TicketStatus.CLOSED: "üîí"
            }.get(ticket['status'], "‚ùì")

            keyboard.add(
                types.InlineKeyboardButton(
                    f"{status_emoji} #{ticket['id']} - {ticket['subject'][:30]}...",
                    callback_data=f"ticket_view_{ticket['id']}"
                )
            )

        keyboard.add(
            types.InlineKeyboardButton(
                "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
                callback_data="support_create"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="support_menu"
            )
        )

        await message.edit_text(
            "üìã –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}")
        await message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_ticket(
    message: types.Message,
    ticket_id: int,
    support_service: SupportService
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ."""
    try:
        ticket = await support_service.get_ticket(ticket_id)

        status_text = {
            TicketStatus.NEW: "üÜï –ù–æ–≤—ã–π",
            TicketStatus.IN_PROGRESS: "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            TicketStatus.WAITING_USER: "üë§ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            TicketStatus.WAITING_ADMIN: "üë®‚Äçüíº –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            TicketStatus.RESOLVED: "‚úÖ –†–µ—à–µ–Ω",
            TicketStatus.CLOSED: "üîí –ó–∞–∫—Ä—ã—Ç"
        }.get(ticket['status'], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        text = (
            f"üìã –¢–∏–∫–µ—Ç #{ticket['id']}\n"
            f"–¢–µ–º–∞: {ticket['subject']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n\n"
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        )

        for msg in ticket['messages']:
            sender = "üë§ –í—ã" if msg['is_from_user'] else "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            if msg['is_auto_response']:
                sender = "ü§ñ –ë–æ—Ç"
            text += f"{sender} ({msg['created_at']}):\n{msg['message']}\n\n"

        keyboard = types.InlineKeyboardMarkup()
        if ticket['status'] not in [TicketStatus.RESOLVED, TicketStatus.CLOSED]:
            keyboard.add(
                types.InlineKeyboardButton(
                    "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"ticket_reply_{ticket['id']}"
                )
            )
            if ticket['status'] == TicketStatus.WAITING_USER:
                keyboard.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
                        callback_data=f"ticket_resolve_{ticket['id']}"
                    )
                )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
                callback_data=f"ticket_close_{ticket['id']}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤",
                callback_data="support_list"
            )
        )

        await message.edit_text(
            text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}")
        await message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def start_ticket_reply(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç."""
    ticket_id = int(callback_query.data.split('_')[2])
    await state.update_data(ticket_id=ticket_id)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–∫–µ—Ç—É",
            callback_data=f"ticket_view_{ticket_id}"
        )
    )

    await callback_query.message.edit_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=keyboard
    )
    await SupportStates.replying_ticket.set()

async def process_ticket_reply(
    message: types.Message,
    state: FSMContext,
    support_service: SupportService
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç."""
    user_data = await state.get_data()
    ticket_id = user_data['ticket_id']

    try:
        await support_service.add_message(
            ticket_id=ticket_id,
            user_id=message.from_user.id,
            message=message.text
        )

        await state.finish()
        await show_ticket(message, ticket_id, support_service)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∏–∫–µ—Ç: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.finish()

async def show_faq(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton(
            "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø",
            callback_data="faq_security"
        ),
        types.InlineKeyboardButton(
            "üí∞ –î–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã",
            callback_data="faq_finance"
        ),
        types.InlineKeyboardButton(
            "üìä –¢–æ—Ä–≥–æ–≤–ª—è",
            callback_data="faq_trading"
        ),
        types.InlineKeyboardButton(
            "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
            callback_data="faq_technical"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="support_menu"
        )
    )

    await message.edit_text(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

async def show_contacts(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "üì± Telegram",
            url="https://t.me/notlike3_support"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚úâÔ∏è Email",
            url="mailto:support@notlike3.bot"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="support_menu"
        )
    )

    await message.edit_text(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ NotLike3 –¥–æ—Å—Ç—É–ø–Ω–∞:\n"
        "- Telegram: @notlike3_support\n"
        "- Email: support@notlike3.bot\n\n"
        "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n"
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 1 —á–∞—Å–∞",
        reply_markup=keyboard
    )

def register_support_handlers(dp: Dispatcher, support_service: SupportService):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    dp.register_message_handler(
        show_support_menu,
        commands=['support']
    )
    dp.register_callback_query_handler(
        lambda c: process_support_callback(c, dp.current_state(), support_service),
        lambda c: c.data.startswith('support_')
    )
    dp.register_callback_query_handler(
        lambda c: process_category_selection(c, dp.current_state()),
        lambda c: c.data.startswith('ticket_category_'),
        state=SupportStates.choosing_category
    )
    dp.register_message_handler(
        process_subject,
        state=SupportStates.entering_subject
    )
    dp.register_message_handler(
        lambda m: process_message(m, dp.current_state(), support_service),
        state=SupportStates.entering_message
    )
    dp.register_callback_query_handler(
        lambda c: start_ticket_reply(c, dp.current_state()),
        lambda c: c.data.startswith('ticket_reply_')
    )
    dp.register_message_handler(
        lambda m: process_ticket_reply(m, dp.current_state(), support_service),
        state=SupportStates.replying_ticket
    ) 