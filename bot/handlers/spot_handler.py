from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from services.spot.spot_service import SpotService
from bot.keyboards.spot_keyboards import spot_menu_keyboard, order_type_keyboard, buy_sell_keyboard, back_to_spot_menu_keyboard #  –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from core.database.database import Database
from services.wallet.wallet_service import WalletService
from bot.config import config #  config
from bot.keyboards.spot_keyboards import spot_keyboard, choose_token_keyboard, choose_side_keyboard, confirm_keyboard
from core.database.models import User, SpotOrder  #  User and SpotOrder
from typing import Union
import logging
from services.dex.dex_service import DEXService
from services.notifications.notification_service import NotificationService
from decimal import Decimal

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å db, wallet_service, solana_client, orca, stonfi)
db = Database()
wallet_service = WalletService()
solana_client = None  #  SolanaClient
orca_api = None  #  OrcaAPI
stonfi_api = None  #  StonfiAPI
spot_service = SpotService(db, wallet_service, solana_client, orca_api, stonfi_api)

#  FSM
class SpotOrderStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_side = State()
    waiting_for_quantity = State()
    waiting_for_price = State() 
    confirm_order = State()
    waiting_for_order_id = State()

class SpotStates(StatesGroup):
    choosing_network = State()
    choosing_token = State()
    entering_amount = State()
    confirming_swap = State()

def _create_spot_menu_keyboard(): #  –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üåê Solana", callback_data="spot_network_solana"),
        types.InlineKeyboardButton("üíé TON", callback_data="spot_network_ton")
    )
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    return keyboard

async def show_spot_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª–∏."""
    keyboard = _create_spot_menu_keyboard()
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:",
        reply_markup=keyboard
    )

async def process_network_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ç–∏."""
    try:
        await callback_query.answer()
        network = callback_query.data.split('_')[2]
        
        await state.update_data(network=network)
        await SpotStates.choosing_token.set()
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        if network == 'solana':
            popular_tokens = [
                ('SOL', 'So11111111111111111111111111111111111111112'),
                ('USDT', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'),
                ('USDC', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),
                ('RAY', '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R')
            ]
        else:  # TON
            popular_tokens = [
                ('TON', 'ton-token-address'),
                ('USDT', 'usdt-token-address'),
                ('BOLT', 'bolt-token-address'),
                ('STONE', 'stone-token-address')
            ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        for token_name, token_address in popular_tokens:
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{token_name}", 
                    callback_data=f"spot_token_{token_address}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        keyboard.add(
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É", callback_data="spot_search")
        )
        keyboard.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="spot")
        )
        
        await callback_query.message.edit_text(
            "üí± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–¥—Ä–µ—Å:",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∏: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_token_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞."""
    try:
        await callback_query.answer()
        
        if callback_query.data == "spot_search":
            await callback_query.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:"
            )
            return
            
        token_address = callback_query.data.split('_')[2]
        await process_token_address(callback_query.message, token_address, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_token_address(message: types.Message, token_address: str, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞."""
    try:
        state_data = await state.get_data()
        network = state_data.get('network')
        
        dex_service = DEXService()
        token_info = await dex_service.get_token_info(network, token_address)
        
        await state.update_data(
            token_address=token_address,
            token_symbol=token_info['symbol'],
            token_decimals=token_info['decimals']
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
        price_info = await dex_service.get_best_price(
            network,
            token_address,
            'USDT' if network == 'solana' else 'ton-usdt-address',
            Decimal('1')
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"spot_network_{network}"),
            types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="spot_continue")
        )
        
        await message.answer(
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {token_info['name']}\n"
            f"–°–∏–º–≤–æ–ª: {token_info['symbol']}\n"
            f"–°–µ—Ç—å: {network.upper()}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price_info['output_amount']:.4f}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {token_info['symbol']}, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:",
            reply_markup=keyboard
        )
        
        await SpotStates.entering_amount.set()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤."""
    try:
        amount = Decimal(message.text)
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        state_data = await state.get_data()
        network = state_data['network']
        token_address = state_data['token_address']
        token_symbol = state_data['token_symbol']
        
        dex_service = DEXService()
        wallet_service = WalletService()
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É
        price_info = await dex_service.get_best_price(
            network,
            token_address,
            'USDT' if network == 'solana' else 'ton-usdt-address',
            amount
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(message.from_user.id, network)
        if Decimal(price_info['input_amount']) > balance:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {price_info['input_amount']} {network.upper()}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance} {network.upper()}"
            )
            return
            
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="spot_confirm"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="spot")
        )
        
        await state.update_data(
            amount=str(amount),
            price_info=price_info
        )
        
        await message.answer(
            f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–≤–æ–ø–∞:\n\n"
            f"–ü–æ–∫—É–ø–∫–∞: {amount} {token_symbol}\n"
            f"–¶–µ–Ω–∞: ${price_info['output_amount']:.4f}\n"
            f"DEX: {price_info['dex']}\n"
            f"–°–µ—Ç—å: {network.upper()}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
        
        await SpotStates.confirming_swap.set()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def execute_swap(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–ø."""
    try:
        await callback_query.answer()
        
        state_data = await state.get_data()
        network = state_data['network']
        token_address = state_data['token_address']
        amount = Decimal(state_data['amount'])
        
        dex_service = DEXService()
        notification_service = NotificationService()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–ø
        swap_result = await dex_service.execute_swap(
            network,
            token_address,
            'USDT' if network == 'solana' else 'ton-usdt-address',
            amount
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notification_service.send_trade_notification(
            user_id=callback_query.from_user.id,
            trade_type="buy",
            amount=amount,
            token_symbol=state_data['token_symbol'],
            price=swap_result['output_amount'],
            tx_hash=swap_result['transaction_hash']
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Å–≤–æ–ø", callback_data="spot"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ –°–≤–æ–ø —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"–ö—É–ø–ª–µ–Ω–æ: {amount} {state_data['token_symbol']}\n"
            f"–¶–µ–Ω–∞: ${swap_result['output_amount']:.4f}\n"
            f"DEX: {swap_result['dex_used']}\n"
            f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {swap_result['transaction_hash']}\n\n"
            f"–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ.",
            reply_markup=keyboard
        )
        
        await state.finish()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–æ–ø–∞: {str(e)}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.finish()

def register_spot_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª–∏."""
    dp.register_callback_query_handler(
        process_network_selection,
        lambda c: c.data.startswith('spot_network_'),
        state='*'
    )
    dp.register_callback_query_handler(
        process_token_selection,
        lambda c: c.data.startswith('spot_token_') or c.data == 'spot_search',
        state=SpotStates.choosing_token
    )
    dp.register_message_handler(
        process_amount,
        state=SpotStates.entering_amount
    )
    dp.register_callback_query_handler(
        execute_swap,
        lambda c: c.data == 'spot_confirm',
        state=SpotStates.confirming_swap
    )
    dp.register_message_handler(show_spot_menu, commands=['spot'])
    dp.register_callback_query_handler(start_create_order, lambda c: c.data == "create_spot_order")
    dp.register_message_handler(process_base_currency, state=SpotStates.choosing_base_currency)
    dp.register_message_handler(process_quote_currency, state=SpotStates.choosing_quote_currency)
    dp.register_callback_query_handler(process_order_type, state=SpotStates.choosing_order_type)
    dp.register_callback_query_handler(process_side, state=SpotStates.choosing_side)
    dp.register_message_handler(process_quantity, state=SpotStates.entering_quantity)
    dp.register_message_handler(process_price, state=SpotStates.entering_price)
    dp.register_callback_query_handler(process_order_confirmation, state=SpotStates.confirming_order)
    dp.register_callback_query_handler(start_cancel_order, lambda c: c.data == "cancel_spot_order")
    dp.register_message_handler(process_cancel_order, state=SpotStates.cancelling_order)
    dp.register_callback_query_handler(show_my_spot_orders, lambda c: c.data == "my_spot_orders")
    dp.register_callback_query_handler(show_spot_order_history, lambda c: c.data == "spot_order_history")
    dp.register_callback_query_handler(back_to_spot_menu_handler, lambda c: c.data == "back_to_spot_menu")
    dp.register_message_handler(spot_start, commands="spot", state="*")
    dp.register_message_handler(lambda msg: msg.text.lower() == "—Å–ø–æ—Ç", state="*")
    dp.register_message_handler(choose_token, state=SpotOrderStates.waiting_for_token)
    dp.register_message_handler(choose_side, state=SpotOrderStates.waiting_for_side)
    dp.register_message_handler(enter_quantity, state=SpotOrderStates.waiting_for_quantity)
    dp.register_message_handler(enter_price, state=SpotOrderStates.waiting_for_price)  #  —Ü–µ–Ω—ã
    dp.register_message_handler(confirm_order, state=SpotOrderStates.confirm_order)
    dp.register_message_handler(cancel_spot_order_start, lambda msg: msg.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", state="*")  #  –æ—Ç–º–µ–Ω—ã
    dp.register_message_handler(cancel_spot_order_confirm, state=SpotOrderStates.waiting_for_order_id)  #  ID
    dp.register_message_handler(show_my_spot_orders, lambda msg: msg.text.lower() == "–º–æ–∏ –æ—Ä–¥–µ—Ä–∞", state="*")
    dp.register_message_handler(show_spot_order_history, lambda msg: msg.text.lower() == "–∏—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤", state="*")
    dp.register_message_handler(back_to_spot_menu_handler, lambda msg: msg.text.lower() == "–Ω–∞–∑–∞–¥", state="*")
    dp.register_message_handler(start_search_token, lambda c: c.data == "spot_search_token")
    dp.register_message_handler(search_token, state=SpotOrderStates.waiting_for_token)
    dp.register_message_handler(start_show_token_info, lambda c: c.data == "spot_token_info")
    dp.register_message_handler(show_token_info, state=SpotOrderStates.waiting_for_token)
    dp.register_message_handler(get_token_price, commands=['price']) 