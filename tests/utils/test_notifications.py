import pytest
from utils.notifications import (
    notify_new_p2p_order,
    notify_p2p_order_taken,
    notify_p2p_order_completed,
    notify_p2p_order_canceled,
    notify_new_spot_order,
    notify_spot_order_status_changed,
    notify_low_balance,
    notify_user,
    NotificationType
)
from unittest.mock import AsyncMock, patch, ANY

pytest_plugins = ('pytest_asyncio',)

@pytest.fixture
def bot_mock():
    return AsyncMock()

@pytest.mark.asyncio
async def test_notify_new_p2p_order(bot_mock):
    """–¢–µ—Å—Ç notify_new_p2p_order."""
    await notify_new_p2p_order(bot_mock, 123, "BUY", "SOL", "USDT", 10.0, 50.0, "binance")
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "üîî –ù–æ–≤—ã–π P2P –æ—Ä–¥–µ—Ä:\n–¢–∏–ø: BUY\n–í–∞–ª—é—Ç–∞: SOL\n–ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: USDT\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10.0\n–¶–µ–Ω–∞: 50.0\n–ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥: binance",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_p2p_order_taken(bot_mock):
    """–¢–µ—Å—Ç notify_p2p_order_taken."""
    await notify_p2p_order_taken(bot_mock, 123, 456)
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "üîî P2P –æ—Ä–¥–µ—Ä #456 –ø—Ä–∏–Ω—è—Ç.",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_p2p_order_completed(bot_mock):
    """–¢–µ—Å—Ç notify_p2p_order_completed."""
    await notify_p2p_order_completed(bot_mock, 123, 456)
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "‚úÖ P2P –æ—Ä–¥–µ—Ä #456 –≤—ã–ø–æ–ª–Ω–µ–Ω.",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_p2p_order_canceled(bot_mock):
    """–¢–µ—Å—Ç notify_p2p_order_canceled."""
    await notify_p2p_order_canceled(bot_mock, 123, 456)
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "‚ùå P2P –æ—Ä–¥–µ—Ä #456 –æ—Ç–º–µ–Ω–µ–Ω.",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_new_spot_order(bot_mock):
    """–¢–µ—Å—Ç notify_new_spot_order."""
    await notify_new_spot_order(bot_mock, 123, "BUY", "SOL", "USDT", 10.0, 50.0)
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "üîî –ù–æ–≤—ã–π —Å–ø–æ—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä:\n–¢–∏–ø: BUY\n–í–∞–ª—é—Ç–∞: SOL\n–ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: USDT\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10.0\n–¶–µ–Ω–∞: 50.0",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_spot_order_status_changed(bot_mock):
    """–¢–µ—Å—Ç notify_spot_order_status_changed."""
    await notify_spot_order_status_changed(bot_mock, 123, 456, "FILLED")
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "üîî –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ #456 –∏–∑–º–µ–Ω–µ–Ω: FILLED",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_low_balance(bot_mock):
    """–¢–µ—Å—Ç notify_low_balance."""
    await notify_low_balance(bot_mock, 123, "SOL", 5.0)
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å SOL: 5.0",
        parse_mode="HTML"
    )

@pytest.mark.asyncio
async def test_notify_user(bot_mock):
    """–¢–µ—Å—Ç notify_user."""
    await notify_user(bot_mock, 123, NotificationType.LOW_BALANCE, "Custom message", {'key': 'value'})
    bot_mock.send_message.assert_awaited_once_with(
        123,
        "Custom message",
        parse_mode="HTML",
        reply_markup=ANY  #  ,    
    ) 