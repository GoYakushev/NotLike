import pytest
from aiogram import types
from aiogram.dispatcher import FSMContext
from unittest.mock import AsyncMock, patch, MagicMock
from bot.handlers.demo_handler import (
    show_demo_menu, toggle_demo_mode, show_demo_balance,
    show_demo_orders, start_demo_trade, process_demo_token,
    process_demo_side, process_demo_amount, process_demo_price,
    confirm_demo_order, DemoStates
)
from services.demo.demo_service import DemoService

pytest_plugins = ('pytest_asyncio',)

@pytest.fixture
def demo_service_mock():
    return AsyncMock(spec=DemoService)

@pytest.fixture
def message_mock():
    mock = AsyncMock(spec=types.Message)
    mock.from_user.id = 123
    mock.from_user.username = "testuser"
    return mock

@pytest.fixture
def callback_query_mock(message_mock):
    mock = AsyncMock(spec=types.CallbackQuery)
    mock.from_user.id = 123
    mock.message = message_mock
    return mock

@pytest.fixture
def state_mock():
    return AsyncMock(spec=FSMContext)

@pytest.mark.asyncio
async def test_show_demo_menu(message_mock):
    """–¢–µ—Å—Ç show_demo_menu."""
    await show_demo_menu(message_mock)
    message_mock.answer.assert_called_once()
    args, kwargs = message_mock.answer.call_args
    assert "üéÆ –î–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª—è" in args[0]
    assert isinstance(kwargs['reply_markup'], types.InlineKeyboardMarkup)

@pytest.mark.asyncio
async def test_toggle_demo_mode_success(callback_query_mock, demo_service_mock):
    """–¢–µ—Å—Ç toggle_demo_mode: —É—Å–ø–µ—Ö."""
    demo_service_mock.toggle_demo_mode.return_value = {'success': True, 'demo_mode': True, 'balance': 1000.0}
    await toggle_demo_mode(callback_query_mock, demo_service_mock)
    demo_service_mock.toggle_demo_mode.assert_awaited_once_with(123)
    callback_query_mock.message.answer.assert_called_with("üîÑ –î–µ–º–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω ‚úÖ\nüí∞ –ë–∞–ª–∞–Ω—Å: $1,000.00")

@pytest.mark.asyncio
async def test_toggle_demo_mode_failure(callback_query_mock, demo_service_mock):
    """–¢–µ—Å—Ç toggle_demo_mode: –æ—à–∏–±–∫–∞."""
    demo_service_mock.toggle_demo_mode.return_value = {'success': False, 'error': 'Some error'}
    await toggle_demo_mode(callback_query_mock, demo_service_mock)
    demo_service_mock.toggle_demo_mode.assert_awaited_once_with(123)
    callback_query_mock.message.answer.assert_called_with("‚ùå –û—à–∏–±–∫–∞: Some error")

@pytest.mark.asyncio
async def test_show_demo_balance(message_mock, demo_service_mock):
    """–¢–µ—Å—Ç show_demo_balance."""
    demo_service_mock.get_demo_balance.return_value = 1234.56
    await show_demo_balance(message_mock, demo_service_mock)
    demo_service_mock.get_demo_balance.assert_awaited_once_with(123)
    message_mock.answer.assert_called_with("üí∞ –í–∞—à –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å: $1,234.56")

@pytest.mark.asyncio
async def test_show_demo_orders(message_mock, demo_service_mock):
    """–¢–µ—Å—Ç show_demo_orders."""
    #  
    order1 = MagicMock()
    order1.token = "SOL"
    order1.side = "BUY"
    order1.amount = 10.0
    order1.price = 50.0
    order1.status = "OPEN"
    order2 = MagicMock()
    order2.token = "TON"
    order2.side = "SELL"
    order2.amount = 5.0
    order2.price = 2.0
    order2.status = "CLOSED"
    demo_service_mock.get_demo_orders.return_value = [order1, order2]

    await show_demo_orders(message_mock, demo_service_mock)

    demo_service_mock.get_demo_orders.assert_awaited_once_with(123)
    message_mock.answer.assert_called_once()
    args, _ = message_mock.answer.call_args
    assert "üìä –í–∞—à–∏ –¥–µ–º–æ-–æ—Ä–¥–µ—Ä–∞" in args[0]
    assert "–¢–æ–∫–µ–Ω: SOL" in args[0]
    assert "–°—Ç–æ—Ä–æ–Ω–∞: BUY" in args[0]
    assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10.0" in args[0]
    assert "–¶–µ–Ω–∞: 50.0" in args[0]
    assert "–°—Ç–∞—Ç—É—Å: OPEN" in args[0]
    assert "–¢–æ–∫–µ–Ω: TON" in args[0]
    assert "–°—Ç–æ—Ä–æ–Ω–∞: SELL" in args[0]
    assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5.0" in args[0]
    assert "–¶–µ–Ω–∞: 2.0" in args[0]
    assert "–°—Ç–∞—Ç—É—Å: CLOSED" in args[0]

@pytest.mark.asyncio
async def test_show_demo_orders_no_orders(message_mock, demo_service_mock):
    """–¢–µ—Å—Ç show_demo_orders: –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤."""
    demo_service_mock.get_demo_orders.return_value = []  #  –æ—Ä–¥–µ—Ä–æ–≤
    await show_demo_orders(message_mock, demo_service_mock)
    demo_service_mock.get_demo_orders.assert_awaited_once_with(123)
    message_mock.answer.assert_called_with("–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–º–æ-–æ—Ä–¥–µ—Ä–æ–≤.")

@pytest.mark.asyncio
async def test_start_demo_trade(message_mock, state_mock):
    """–¢–µ—Å—Ç start_demo_trade."""
    await start_demo_trade(message_mock, state_mock)
    message_mock.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL):")
    state_mock.set_state.assert_called_with(DemoStates.choosing_token)

@pytest.mark.asyncio
async def test_process_demo_token(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_token."""
    message_mock.text = "SOL"
    await process_demo_token(message_mock, state_mock)
    message_mock.answer.assert_called_with("–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (BUY) –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å (SELL)?")
    state_mock.set_state.assert_called_with(DemoStates.choosing_side)
    state_mock.update_data.assert_called_with(token="SOL")

@pytest.mark.asyncio
async def test_process_demo_side_buy(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_side (BUY)."""
    message_mock.text = "BUY"
    await process_demo_side(message_mock, state_mock)
    message_mock.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    state_mock.set_state.assert_called_with(DemoStates.entering_amount)
    state_mock.update_data.assert_called_with(side="BUY")

@pytest.mark.asyncio
async def test_process_demo_side_sell(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_side (SELL)."""
    message_mock.text = "SELL"
    await process_demo_side(message_mock, state_mock)
    message_mock.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    state_mock.set_state.assert_called_with(DemoStates.entering_amount)
    state_mock.update_data.assert_called_with(side="SELL")

@pytest.mark.asyncio
async def test_process_demo_side_invalid(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_side: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥."""
    message_mock.text = "INVALID"
    await process_demo_side(message_mock, state_mock)
    message_mock.answer.assert_called_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ BUY –∏–ª–∏ SELL.")
    state_mock.set_state.assert_not_called()  #  –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    state_mock.update_data.assert_not_called()

@pytest.mark.asyncio
async def test_process_demo_amount(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_amount."""
    message_mock.text = "10.5"
    await process_demo_amount(message_mock, state_mock)
    message_mock.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã):")
    state_mock.set_state.assert_called_with(DemoStates.entering_price)
    state_mock.update_data.assert_called_with(amount=10.5)

@pytest.mark.asyncio
async def test_process_demo_amount_invalid(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_amount: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥."""
    message_mock.text = "abc"  #  
    await process_demo_amount(message_mock, state_mock)
    message_mock.answer.assert_called_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    state_mock.set_state.assert_not_called()
    state_mock.update_data.assert_not_called()

@pytest.mark.asyncio
async def test_process_demo_price(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_price (—Å —Ü–µ–Ω–æ–π)."""
    message_mock.text = "55.5"
    await process_demo_price(message_mock, state_mock)
    message_mock.answer.assert_called_with(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ä–¥–µ—Ä:\n–¢–æ–∫–µ–Ω: {ANY}\n–°—Ç–æ—Ä–æ–Ω–∞: {ANY}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ANY}\n–¶–µ–Ω–∞: 55.5", reply_markup=ANY)
    state_mock.set_state.assert_called_with(DemoStates.confirming_order)
    state_mock.update_data.assert_called_with(price=55.5)

@pytest.mark.asyncio
async def test_process_demo_price_empty(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_price (–±–µ–∑ —Ü–µ–Ω—ã, —Ä—ã–Ω–æ—á–Ω–∞—è)."""
    message_mock.text = ""  #  
    await process_demo_price(message_mock, state_mock)
    message_mock.answer.assert_called_with(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ä–¥–µ—Ä:\n–¢–æ–∫–µ–Ω: {ANY}\n–°—Ç–æ—Ä–æ–Ω–∞: {ANY}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ANY}\n–¶–µ–Ω–∞: ", reply_markup=ANY)
    state_mock.set_state.assert_called_with(DemoStates.confirming_order)
    state_mock.update_data.assert_called_with(price=None)  #  

@pytest.mark.asyncio
async def test_process_demo_price_invalid(message_mock, state_mock):
    """–¢–µ—Å—Ç process_demo_price: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥."""
    message_mock.text = "abc"  #  
    await process_demo_price(message_mock, state_mock)
    message_mock.answer.assert_called_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
    state_mock.set_state.assert_not_called()
    state_mock.update_data.assert_not_called()

@pytest.mark.asyncio
async def test_confirm_demo_order_success(message_mock, state_mock, demo_service_mock):
    """–¢–µ—Å—Ç confirm_demo_order: —É—Å–ø–µ—Ö."""
    state_mock.get_data.return_value = {"token": "SOL", "side": "BUY", "amount": 10.0, "price": 50.0}
    demo_service_mock.create_demo_order.return_value = {'success': True, 'order_id': 123}
    await confirm_demo_order(message_mock, state_mock, demo_service_mock)
    demo_service_mock.create_demo_order.assert_awaited_once_with(123, "SOL", "BUY", 10.0, 50.0)
    message_mock.answer.assert_called_with("‚úÖ –î–µ–º–æ-–æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω. ID: 123")
    state_mock.finish.assert_called_once()

@pytest.mark.asyncio
async def test_confirm_demo_order_failure(message_mock, state_mock, demo_service_mock):
    """–¢–µ—Å—Ç confirm_demo_order: –æ—à–∏–±–∫–∞."""
    state_mock.get_data.return_value = {"token": "SOL", "side": "BUY", "amount": 10.0, "price": 50.0}
    demo_service_mock.create_demo_order.return_value = {'success': False, 'error': 'Some error'}
    await confirm_demo_order(message_mock, state_mock, demo_service_mock)
    demo_service_mock.create_demo_order.assert_awaited_once_with(123, "SOL", "BUY", 10.0, 50.0)
    message_mock.answer.assert_called_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–æ—Ä–¥–µ—Ä–∞: Some error")
    state_mock.finish.assert_called_once() 