import pytest
from aiogram import types
from aiogram.dispatcher import FSMContext
from unittest.mock import AsyncMock, patch, MagicMock
from bot.handlers.swap_handler import (
    show_swap_menu, start_swap, process_swap_amount,
    SwapStates
)
from services.swap.swap_service import SwapService

pytest_plugins = ('pytest_asyncio',)

@pytest.fixture
def swap_service_mock():
    return AsyncMock(spec=SwapService)

@pytest.fixture
def message_mock():
    mock = AsyncMock(spec=types.Message)
    mock.from_user.id = 123
    mock.from_user.username = "testuser"
    return mock

@pytest.fixture
def callback_query_mock(message_mock):
    mock = AsyncMock(spec=types.CallbackQuery)
    mock.from_user.id = 123
    mock.message = message_mock
    return mock

@pytest.fixture
def state_mock():
    return AsyncMock(spec=FSMContext)

@pytest.mark.asyncio
async def test_show_swap_menu(message_mock):
    """–¢–µ—Å—Ç show_swap_menu."""
    await show_swap_menu(message_mock)
    message_mock.answer.assert_called_once()
    args, kwargs = message_mock.answer.call_args
    assert "üîÑ –°–≤–æ–ø—ã" in args[0]
    assert isinstance(kwargs['reply_markup'], types.InlineKeyboardMarkup)

@pytest.mark.asyncio
async def test_start_swap(callback_query_mock, state_mock):
    """–¢–µ—Å—Ç start_swap."""
    callback_query_mock.data = "swap_sol_ton"
    await start_swap(callback_query_mock, state_mock)
    callback_query_mock.message.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –æ–±–º–µ–Ω–∞:")
    state_mock.set_state.assert_called_with(SwapStates.entering_amount)
    state_mock.update_data.assert_called_with(from_currency="SOL", to_currency="TON")
    callback_query_mock.answer.assert_called_once()

@pytest.mark.asyncio
async def test_start_swap_ton_sol(callback_query_mock, state_mock):
    """–¢–µ—Å—Ç start_swap (TON -> SOL)."""
    callback_query_mock.data = "swap_ton_sol"  #  
    await start_swap(callback_query_mock, state_mock)
    callback_query_mock.message.answer.assert_called_with("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –æ–±–º–µ–Ω–∞:")  #  
    state_mock.set_state.assert_called_with(SwapStates.entering_amount)
    state_mock.update_data.assert_called_with(from_currency="TON", to_currency="SOL")  #  
    callback_query_mock.answer.assert_called_once()

@pytest.mark.asyncio
async def test_process_swap_amount_success(message_mock, state_mock, swap_service_mock):
    """–¢–µ—Å—Ç process_swap_amount: —É—Å–ø–µ—Ö."""
    message_mock.text = "10.5"
    state_mock.get_data.return_value = {"from_currency": "SOL", "to_currency": "TON"}
    swap_service_mock.get_swap_price.return_value = {
        'success': True,
        'rate': 2.0,
        'estimated': 21.0
    }

    await process_swap_amount(message_mock, state_mock, swap_service_mock)

    swap_service_mock.get_swap_price.assert_awaited_once_with("SOL", "TON", 10.5)
    message_mock.answer.assert_called_once()
    args, kwargs = message_mock.answer.call_args
    assert "üìä –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞" in args[0]
    assert "–û—Ç: 10.5 SOL" in args[0]
    assert "–ö: 21.0 TON" in args[0]
    assert "–ö—É—Ä—Å: 1 SOL = 2.0 TON" in args[0]
    assert isinstance(kwargs['reply_markup'], types.InlineKeyboardMarkup)  #  
    state_mock.finish.assert_not_called() #  ,   

@pytest.mark.asyncio
async def test_process_swap_amount_invalid_input(message_mock, state_mock):
    """–¢–µ—Å—Ç process_swap_amount: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥."""
    message_mock.text = "abc"  #  
    await process_swap_amount(message_mock, state_mock)
    message_mock.answer.assert_called_with("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    state_mock.finish.assert_not_called()

@pytest.mark.asyncio
async def test_process_swap_amount_price_error(message_mock, state_mock, swap_service_mock):
    """–¢–µ—Å—Ç process_swap_amount: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
    message_mock.text = "10.5"
    state_mock.get_data.return_value = {"from_currency": "SOL", "to_currency": "TON"}
    swap_service_mock.get_swap_price.return_value = {'success': False}  #  
    await process_swap_amount(message_mock, state_mock, swap_service_mock)
    message_mock.answer.assert_called_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
    state_mock.finish.assert_not_called() 