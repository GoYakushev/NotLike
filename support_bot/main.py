from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import BOT_TOKEN, OPENROUTER_API_KEY, SUPPORT_MODEL, TEMPERATURE, SUPPORT_PROMPT
import openrouter
import asyncio
import json

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

openrouter.api_key = OPENROUTER_API_KEY

async def get_ai_response(message: str) -> str:
    try:
        response = await openrouter.ChatCompletion.create(
            model=SUPPORT_MODEL,
            messages=[
                {"role": "system", "content": SUPPORT_PROMPT},
                {"role": "user", "content": message}
            ],
            temperature=TEMPERATURE
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /helpme –¥–ª—è —Å–≤—è–∑–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n–û—à–∏–±–∫–∞: {str(e)}"

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Not Like Support!\n\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /helpme\n\n"
        "‚ùóÔ∏è –ù–æ—á—å—é –æ—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏."
    )

@dp.message_handler(commands=['helpme'])
async def helpme_handler(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    admins = await get_available_admins()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
    ticket_id = await create_support_ticket(message.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin in admins:
        await bot.send_message(
            admin.telegram_id,
            f"üÜò –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            f"–û—Ç: @{message.from_user.username}\n"
            f"ID: {ticket_id}\n\n"
            f"–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_ticket_{ticket_id}")
            )
        )
    
    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.\n"
        "–ü–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ."
    )

@dp.message_handler(content_types=['text', 'photo', 'video'])
async def handle_message(message: types.Message):
    if message.text and not message.text.startswith('/'):
        response = await get_ai_response(message.text)
        await message.answer(response)
    elif message.photo or message.video:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        ticket = await get_active_ticket(message.from_user.id)
        if ticket and ticket.operator_id:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            await forward_to_operator(message, ticket.operator_id)
        else:
            await message.answer(
                "üì∏ –Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª.\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /helpme –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
            )

async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main()) 