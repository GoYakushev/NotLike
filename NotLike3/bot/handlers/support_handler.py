from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from core.database.models import SupportTicket, User
from core.database.database import Database

db = Database()

class SupportStates(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()

async def show_support_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="create_ticket")
    )
    keyboard.add(
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    await message.answer(
        "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç.",
        reply_markup=keyboard
    )

async def start_ticket_creation(callback_query: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞."""
    await SupportStates.waiting_for_subject.set()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await callback_query.answer()

async def process_ticket_subject(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è."""
    await state.update_data(subject=message.text)
    await SupportStates.waiting_for_message.set()
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")

async def process_ticket_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–∫–µ—Ç."""
    data = await state.get_data()
    subject = data['subject']
    ticket_message = message.text

    session = db.get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return

    try:
        ticket = SupportTicket(
            user_id=user.id,
            subject=subject,
            message=ticket_message,
            status='OPEN'
        )
        session.add(ticket)
        session.commit()

        await message.answer("‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    except Exception as e:
        session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}")

    finally:
        session.close()
        await state.finish() 