from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from core.database.models import User
from core.database.database import Database

db = Database()

class AdminStates(StatesGroup):
    waiting_for_message = State()

async def show_admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    session = db.get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if user and user.is_admin:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        )
        keyboard.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

async def show_statistics(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    #  —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        'total_users': 1000,
        'active_users_24h': 500,
        'total_transactions_24h': 2000,
        'total_volume_24h': 100000,
    }

    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['active_users_24h']}\n"
        f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞: {stats['total_transactions_24h']}\n"
        f"üí∞ –û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞: ${stats['total_volume_24h']:,.2f}"
    )

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))

    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

async def broadcast_message(callback_query: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await AdminStates.waiting_for_message.set()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await callback_query.answer()

async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    session = db.get_session()
    users = session.query(User).all()
    session.close()

    for user in users:
        try:
            await message.copy_to(user.telegram_id)
        except Exception as e:
            print(f"Error sending message to {user.telegram_id}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish() 