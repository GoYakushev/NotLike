from core.database.models import User, SupportTicket, SupportMessage
from core.database.database import Database
from utils.notifications import NotificationManager
from datetime import datetime
import json

class SupportService:
    def __init__(self, notification_manager: NotificationManager):
        self.db = Database()
        self.notifications = notification_manager
        
    async def create_ticket(self, user_id: int, subject: str, message: str) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()
        
        try:
            ticket = SupportTicket(
                user_id=user.id,
                subject=subject,
                status='OPEN',
                priority='MEDIUM'
            )
            session.add(ticket)
            session.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = SupportMessage(
                ticket_id=ticket.id,
                sender_id=user.id,
                message=message
            )
            session.add(message)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = session.query(Admin).filter(Admin.permissions.contains('support')).all()
            for admin in admins:
                await self.notifications.send_notification(
                    admin.user.telegram_id,
                    "üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                    f"–¢–µ–º–∞: {subject}\n–û—Ç: @{user.username}"
                )
            
            session.commit()
            return {
                'success': True,
                'ticket_id': ticket.id
            }
        except Exception as e:
            session.rollback()
            return {
                'success': False,
                'error': str(e)
            }
            
    async def reply_to_ticket(self, ticket_id: int, user_id: int, message: str, is_support: bool = False) -> dict:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç"""
        session = self.db.get_session()
        ticket = session.query(SupportTicket).get(ticket_id)
        user = session.query(User).filter_by(telegram_id=user_id).first()
        
        if not ticket or not user:
            return {
                'success': False,
                'error': '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
            
        try:
            reply = SupportMessage(
                ticket_id=ticket.id,
                sender_id=user.id,
                message=message,
                is_from_support=is_support
            )
            session.add(reply)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            recipient_id = ticket.user.telegram_id if is_support else \
                          session.query(Admin).filter(Admin.permissions.contains('support')).first().user.telegram_id
                          
            await self.notifications.send_notification(
                recipient_id,
                "üí¨ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç–µ",
                f"–¢–∏–∫–µ—Ç #{ticket.id}\n\n{message}"
            )
            
            session.commit()
            return {'success': True}
        except Exception as e:
            session.rollback()
            return {
                'success': False,
                'error': str(e)
            } 