from core.database.models import User, ReferralProgram, ReferralEarning
from core.database.database import Database
from utils.notifications import NotificationManager
from datetime import datetime
import json
from typing import Optional

class ReferralService:
    def __init__(self, notification_manager: NotificationManager, db: Optional[Database] = None):
        self.db = db or Database()
        self.notifications = notification_manager
        
    async def create_referral_link(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()
        
        if not user:
            return None
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        ref_code = f"ref_{user.id}_{hash(datetime.now())}"[:20]
        
        return f"https://t.me/your_bot_username?start={ref_code}"
        
    async def process_referral(self, referral_code: str, new_user_id: int) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        session = self.db.get_session()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –∫–æ–¥–∞
            referrer_id = int(referral_code.split('_')[1])
            referrer = session.query(User).get(referrer_id)
            
            if not referrer:
                return False
                
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = session.query(User).filter_by(telegram_id=new_user_id).first()
            new_user.referrer_id = referrer.id
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await self.notifications.send_notification(
                referrer.telegram_id,
                "üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª",
                f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!"
            )
            
            session.commit()
            return True
        except:
            session.rollback()
            return False
            
    async def calculate_commission(self, order_id: int, amount: float) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é"""
        session = self.db.get_session()
        order = session.query(SpotOrder).get(order_id)
        
        if not order:
            return None
            
        user = order.user
        if not user.referrer_id:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        program = session.query(ReferralProgram).filter_by(is_active=True).first()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        commission = amount * (program.commission_rate / 100)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
        earning = ReferralEarning(
            referrer_id=user.referrer_id,
            referred_id=user.id,
            order_id=order_id,
            amount=commission,
            currency='USDT'
        )
        
        session.add(earning)
        session.commit()
        
        return {
            'amount': commission,
            'currency': 'USDT'
        }

    async def get_referral_link(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()
        session.close()

        if not user:
            return "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        #  username,   ID
        return f"https://t.me/your_bot?start={user.username or user.telegram_id}"

    async def get_referral_stats(self, user_id: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            return {'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        referrals = session.query(User).filter_by(referral_id=user.id).all()
        total_referrals = len(referrals)
        active_referrals = sum(1 for ref in referrals if ref.last_login_date)  #  last_login_date
        total_earned = 0  #  

        session.close()
        return {
            'total_referrals': total_referrals,
            'active_referrals': active_referrals,
            'total_earned': total_earned
        }

    async def process_referral(self, referrer_id: int, referred_user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        session = self.db.get_session()
        referrer = session.query(User).filter_by(telegram_id=referrer_id).first()
        referred_user = session.query(User).filter_by(telegram_id=referred_user_id).first()

        if not referrer or not referred_user:
            return

        if referred_user.referral_id:
            return  #  

        referred_user.referral_id = referrer.id
        session.commit()
        session.close() 