from core.database.models import User, P2POrder, P2PAdvertisement, PaymentMethod, P2PDispute, P2POrderStatus, P2PPaymentMethod, Wallet
from core.database.database import Database
from utils.security import Security
from datetime import datetime, timedelta
import json
from services.wallet.wallet_service import WalletService
from services.notifications.notification_service import NotificationService, NotificationType
from services.fees.fee_service import FeeService
from typing import List, Dict, Optional

class P2PService:
    def __init__(self, db: Database, wallet_service: WalletService, notification_service: NotificationService):
        self.db = db
        self.wallet_service = wallet_service
        self.notification_service = notification_service
        self.security = Security()
        self.fee_service = FeeService(db)
        
    async def create_advertisement(self, user_id: int, data: dict) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ P2P –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()
        
        try:
            ad = P2PAdvertisement(
                user_id=user.id,
                type=data['type'],
                crypto_currency=data['crypto_currency'],
                fiat_currency=data['fiat_currency'],
                price=data['price'],
                min_amount=data['min_amount'],
                max_amount=data['max_amount'],
                payment_method_id=data['payment_method_id']
            )
            
            session.add(ad)
            session.commit()
            
            return {
                'success': True,
                'ad_id': ad.id
            }
        except Exception as e:
            session.rollback()
            return {
                'success': False,
                'error': str(e)
            }
            
    async def create_order(self, user_id: int, side: str, base_currency: str, quote_currency: str,
                           amount: float, price: float, payment_method: str, limit_min: float = None,
                           limit_max: float = None, time_limit: int = None) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            return {'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        try:
            order = P2POrder(
                user_id=user.id,
                side=side,
                base_currency=base_currency,
                quote_currency=quote_currency,
                crypto_amount=amount,
                fiat_amount=amount * price,
                price=price,
                payment_method=payment_method,
                limit_min=limit_min,
                limit_max=limit_max,
                time_limit=time_limit,
                status=P2POrderStatus.OPEN,
                expires_at=datetime.utcnow() + timedelta(minutes=30)  #  30
            )
            session.add(order)

            #  –∫–æ–º–∏—Å—Å–∏—é
            fee_result = await self.fee_service.apply_fee(user.telegram_id, 'p2p', order.fiat_amount, {'order_id': order.id})
            if not fee_result['success']:
                session.rollback()
                return fee_result #  –æ—à–∏–±–∫—É

            session.commit()

            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π P2P –æ—Ä–¥–µ—Ä #{order.id} ({side})",
                data={
                    'order_id': order.id,
                    'actions': [
                        {'text': 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'callback': f'p2p_view_{order.id}'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback': f'p2p_cancel_{order.id}'}
                    ]
                }
            )

            return {'success': True, 'order_id': order.id}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': str(e)}

    async def get_open_orders(self, base_currency: Optional[str] = None, quote_currency: Optional[str] = None,
                              side: Optional[str] = None, payment_method: Optional[str] = None) -> List[P2POrder]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö P2P –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
        session = self.db.get_session()
        query = session.query(P2POrder).filter(P2POrder.status == P2POrderStatus.OPEN)

        if base_currency:
            query = query.filter(P2POrder.base_currency == base_currency)
        if quote_currency:
            query = query.filter(P2POrder.quote_currency == quote_currency)
        if side:
            query = query.filter(P2POrder.side == side)
        if payment_method:
            query = query.filter(P2POrder.payment_method == payment_method)

        orders = query.all()
        session.close()
        return orders

    async def get_order_by_id(self, order_id: int) -> Optional[P2POrder]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä –ø–æ ID."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)
        session.close()  #  
        return order

    async def take_order(self, order_id: int, taker_id: int) -> Dict:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (–ø–æ–∫—É–ø–∞–µ—Ç/–ø—Ä–æ–¥–∞–µ—Ç) P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)
        taker = session.query(User).filter_by(telegram_id=taker_id).first()

        if not order or not taker:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

        if order.status != P2POrderStatus.OPEN:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}

        if order.user_id == taker.id:
            return {'success': False, 'error': '–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä'}

        try:
            order.taker_id = taker.id
            order.status = P2POrderStatus.IN_PROGRESS  #  

            #  –∫–æ–º–∏—Å—Å–∏—é
            fee_result = await self.fee_service.apply_fee(taker.telegram_id, 'p2p', order.fiat_amount, {'order_id': order.id})
            if not fee_result['success']:
                session.rollback()
                return fee_result

            session.commit()

            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–í–∞—à P2P –æ—Ä–¥–µ—Ä #{order.id} –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{taker.username}!",
                data={'order_id': order.id, 'taker_username': taker.username}
            )
            await self.notification_service.notify(
                user_id=taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ P2P –æ—Ä–¥–µ—Ä #{order.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{order.user.username}!",
                data={'order_id': order.id, 'owner_username': order.user.username}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}
        finally:
            session.close()  #

    async def cancel_order(self, order_id: int, user_id: int) -> dict:
        """–û—Ç–º–µ–Ω—è–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        try:
            order = session.query(P2POrder).filter(P2POrder.id == order_id).first()
            if not order:
                return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            #  –æ—Ç–º–µ–Ω–∏—Ç—å  —Å–æ–∑–¥–∞—Ç–µ–ª—å,  –∞–¥–º–∏–Ω
            if order.user_id != user_id and not session.query(User).filter(User.id == user_id).first().is_admin:
                return {'success': False, 'error': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞'}
            if order.status not in (P2POrderStatus.OPEN, P2POrderStatus.IN_PROGRESS):  #  –æ—Ç–º–µ–Ω—è—Ç—å  OPEN  IN_PROGRESS
                return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å'}

            #  —Ç–æ–∫–µ–Ω
            token_address = None if order.base_currency in ("SOL", "TON") else "address_" + order.base_currency

            #  —Å—Ä–µ–¥—Å—Ç–≤
            if order.status == P2POrderStatus.OPEN:
                if order.side == "SELL":
                    unlocked = await self.wallet_service.unlock_funds(order.user_id, "TON" if order.base_currency == "TON" else "SOL", order.amount, token_address)
                    if not unlocked:
                        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞'}
            elif order.status == P2POrderStatus.IN_PROGRESS:
                if order.side == "BUY":
                    #  —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (taker)
                    unlocked = await self.wallet_service.unlock_funds(order.taker_id, "TON" if order.quote_currency == "TON" else "SOL", order.amount * order.price, None if order.quote_currency in ("SOL", "TON") else "address_" + order.quote_currency)
                    if not unlocked:
                        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞'}
                else: #  SELL,  —Å—Ä–µ–¥—Å—Ç–≤–∞  —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                    pass

            order.status = P2POrderStatus.CANCELLED
            session.commit()
            return {'success': True}

        except Exception as e:
            session.rollback()
            print(f"Error canceling P2P order: {e}")
            return {'success': False, 'error': str(e)}
        finally:
            session.close()

    async def get_user_p2p_orders(self, user_id: int) -> List[P2POrder]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ P2P –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            return []
        return user.p2p_orders + user.taken_p2p_orders

    async def get_user_taken_p2p_orders(self, user_id: int, status: Optional[str] = None) -> List[P2POrder]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ P2P –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        session = self.db.get_session()
        query = session.query(P2POrder).filter(P2POrder.taker_id == user_id)
        if status:
            query = query.filter(P2POrder.status == P2POrderStatus[status.upper()])
        orders = query.all()
        session.close()
        return orders

    async def complete_order(self, order_id: int, user_id: int) -> Dict:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        #  ,   
        if order.user_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä'}

        if order.status != P2POrderStatus.CONFIRMED:
            return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞'}

        try:
            #  —Å—Ä–µ–¥—Å—Ç–≤–∞
            if order.side == "BUY":
                await self.wallet_service.transfer_funds(
                    from_user_id=order.taker.telegram_id,
                    to_user_id=order.user.telegram_id,
                    network="TON",
                    amount=order.crypto_amount,
                    token_address=None
                )
            else:  # SELL
                await self.wallet_service.transfer_funds(
                    from_user_id=order.user.telegram_id,
                    to_user_id=order.taker.telegram_id,
                    network="TON",
                    amount=order.crypto_amount,
                    token_address=None
                )

            order.status = P2POrderStatus.COMPLETED
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}
        finally:
            session.close()  #

    async def open_dispute(self, order_id: int, user_id: int) -> Dict:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.user_id != user_id and order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}

        if order.status != P2POrderStatus.IN_PROGRESS:
            return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞'}

        try:
            order.status = P2POrderStatus.DISPUTE
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (TODO)
            # ...
            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id}!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id}!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏—Å–ø—É—Ç–∞: {str(e)}'}
        finally:
            session.close()  #

    async def resolve_dispute(self, order_id: int, admin_id: int, decision: str) -> Dict:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != P2POrderStatus.DISPUTE:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –¥–∏—Å–ø—É—Ç–∞'}

        try:
            if decision == 'refund':
                #  —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                if order.side == "BUY":
                    #  
                    pass
                else:  # SELL
                    #  
                    pass
                order.status = P2POrderStatus.CANCELLED
            elif decision == 'complete':
                #  –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞
                if order.side == "BUY":
                    #  
                    await self.wallet_service.transfer_funds(
                        from_user_id=order.taker.telegram_id,
                        to_user_id=order.user.telegram_id,
                        network="TON",
                        amount=order.crypto_amount,
                        token_address=None
                    )
                else:  # SELL
                    #  
                    await self.wallet_service.transfer_funds(
                        from_user_id=order.user.telegram_id,
                        to_user_id=order.taker.telegram_id,
                        network="TON",
                        amount=order.crypto_amount,
                        token_address=None
                    )
                order.status = P2POrderStatus.COMPLETED
            else:
                return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'}

            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–î–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id} —Ä–∞–∑—Ä–µ—à–µ–Ω. –†–µ—à–µ–Ω–∏–µ: {decision}",
                data={'order_id': order.id, 'decision': decision}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–î–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id} —Ä–∞–∑—Ä–µ—à–µ–Ω. –†–µ—à–µ–Ω–∏–µ: {decision}",
                data={'order_id': order.id, 'decision': decision}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–∏—Å–ø—É—Ç–∞: {str(e)}'}
        finally:
            session.close()  #

    async def get_advertisements(self, crypto: str, fiat: str, type: str) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        session = self.db.get_session()
        ads = session.query(P2PAdvertisement).filter(
            P2PAdvertisement.crypto_currency == crypto,
            P2PAdvertisement.fiat_currency == fiat,
            P2PAdvertisement.type == type,
            P2PAdvertisement.available == True
        ).all()
        
        return [{
            'id': ad.id,
            'user': ad.user.username,
            'price': ad.price,
            'min_amount': ad.min_amount,
            'max_amount': ad.max_amount,
            'payment_method': ad.payment_method.name
        } for ad in ads]

    async def create_p2p_order(self,
                             user_id: int,
                             order_type: str,  # "BUY" or "SELL"
                             crypto_amount: float,
                             fiat_amount: float,
                             fiat_currency: str,
                             payment_method: str,
                             limit_min: Optional[float] = None,
                             limit_max: Optional[float] = None,
                             time_limit: Optional[int] = None,
                             crypto_currency: str = "SOL") -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            return {'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if limit_min is not None and limit_max is not None and limit_min > limit_max:
            return {'success': False, 'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ'}

        if crypto_currency not in ("SOL", "TON", "USDT", "NOT"):
            return {'success': False, 'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'}

        try:
            order = P2POrder(
                user_id=user.id,
                type=order_type,
                crypto_amount=crypto_amount,
                fiat_amount=fiat_amount,
                fiat_currency=fiat_currency,
                payment_method=payment_method,
                limit_min=limit_min,
                limit_max=limit_max,
                time_limit=time_limit,
                status='OPEN',
                crypto_currency=crypto_currency
            )
            session.add(order)
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π P2P –æ—Ä–¥–µ—Ä #{order.id} ({order_type})",
                data={
                    'order_id': order.id,
                    'actions': [
                        {'text': 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'callback': f'p2p_view_{order.id}'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback': f'p2p_cancel_{order.id}'}
                    ]
                }
            )

            return {'success': True, 'order_id': order.id}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def find_matching_p2p_orders(self, side: str, base_currency: str, quote_currency: str,
                                       amount: float, payment_method: str) -> List[P2POrder]:
        """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ P2P –æ—Ä–¥–µ—Ä–∞."""
        session = self.db.get_session()
        opposite_side = "BUY" if side == "SELL" else "SELL"

        orders = session.query(P2POrder).filter(
            P2POrder.side == opposite_side,
            P2POrder.base_currency == base_currency,
            P2POrder.quote_currency == quote_currency,
            P2POrder.status == P2POrderStatus.OPEN,
            P2POrder.payment_method == payment_method,
            P2POrder.crypto_amount >= amount,  #  
            P2POrder.price <= amount  #  —Ü–µ–Ω—É
        ).all()
        return orders

    async def confirm_p2p_order(self, order_id: int, counterparty_order_id: int) -> Dict:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)
        counterparty_order = session.query(P2POrder).get(counterparty_order_id)

        if not order or not counterparty_order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != 'OPEN' or counterparty_order.status != 'OPEN':
            return {'success': False, 'error': '–û–¥–∏–Ω –∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            
        if order.type == counterparty_order.type:
            return {'success': False, 'error': "–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ä–¥–µ—Ä —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞"}

        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ WalletService)
            # ...

            order.status = 'CONFIRMED'
            counterparty_order.status = 'CONFIRMED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=counterparty_order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{counterparty_order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                data={'order_id': counterparty_order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def complete_p2p_order(self, order_id: int) -> Dict:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != 'CONFIRMED':
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}

        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ WalletService)
            # ...

            order.status = 'COMPLETED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def cancel_p2p_order(self, order_id: int, user_id: int) -> Dict:
        """–û—Ç–º–µ–Ω—è–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        #   
        if order.user_id != user_id and order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}

        if order.status not in ['OPEN', 'CONFIRMED']:
            return {'success': False, 'error': '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ –¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ'}

        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (TODO)
            # ...

            order.status = 'CANCELLED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –æ—Ç–º–µ–Ω–µ–Ω",
                data={'order_id': order.id}
            )
            if order.taker_id:  #  ,   
                await self.notification_service.notify(
                    user_id=order.taker.telegram_id,
                    notification_type=NotificationType.P2P_UPDATE,
                    message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –æ—Ç–º–µ–Ω–µ–Ω",
                    data={'order_id': order.id}
                )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}
        finally:
            session.close()  #

    async def confirm_payment(self, order_id: int, user_id: int) -> Dict:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä'}

        if order.status != P2POrderStatus.IN_PROGRESS:
            return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞'}

        try:
            order.status = P2POrderStatus.CONFIRMED
            session.commit()

            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{order.taker.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –æ—Ä–¥–µ—Ä—É #{order.id}!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}'}
        finally:
            session.close()  #

    async def complete_order(self, order_id: int, user_id: int) -> Dict:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        #  ,   
        if order.user_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä'}

        if order.status != P2POrderStatus.CONFIRMED:
            return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞'}

        try:
            #  —Å—Ä–µ–¥—Å—Ç–≤–∞
            if order.side == "BUY":
                await self.wallet_service.transfer_funds(
                    from_user_id=order.taker.telegram_id,
                    to_user_id=order.user.telegram_id,
                    network="TON",
                    amount=order.crypto_amount,
                    token_address=None
                )
            else:  # SELL
                await self.wallet_service.transfer_funds(
                    from_user_id=order.user.telegram_id,
                    to_user_id=order.taker.telegram_id,
                    network="TON",
                    amount=order.crypto_amount,
                    token_address=None
                )

            order.status = P2POrderStatus.COMPLETED
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}
        finally:
            session.close()  #

    async def cancel_p2p_order(self, order_id: int, user_id: int) -> Dict:
        """–û—Ç–º–µ–Ω—è–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        #   
        if order.user_id != user_id and order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}

        if order.status not in ['OPEN', 'CONFIRMED']:
            return {'success': False, 'error': '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ –¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ'}

        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (TODO)
            # ...

            order.status = 'CANCELLED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –æ—Ç–º–µ–Ω–µ–Ω",
                data={'order_id': order.id}
            )
            if order.taker_id:  #  ,   
                await self.notification_service.notify(
                    user_id=order.taker.telegram_id,
                    notification_type=NotificationType.P2P_UPDATE,
                    message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –æ—Ç–º–µ–Ω–µ–Ω",
                    data={'order_id': order.id}
                )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}
        finally:
            session.close()  #

    async def open_dispute(self, order_id: int, user_id: int) -> Dict:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.user_id != user_id and order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}

        if order.status != P2POrderStatus.IN_PROGRESS:
            return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞'}

        try:
            order.status = P2POrderStatus.DISPUTE
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (TODO)
            # ...
            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id}!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id}!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏—Å–ø—É—Ç–∞: {str(e)}'}
        finally:
            session.close()  #

    async def resolve_dispute(self, order_id: int, admin_id: int, decision: str) -> Dict:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != P2POrderStatus.DISPUTE:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –¥–∏—Å–ø—É—Ç–∞'}

        try:
            if decision == 'refund':
                #  —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                if order.side == "BUY":
                    #  
                    pass
                else:  # SELL
                    #  
                    pass
                order.status = P2POrderStatus.CANCELLED
            elif decision == 'complete':
                #  –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞
                if order.side == "BUY":
                    #  
                    await self.wallet_service.transfer_funds(
                        from_user_id=order.taker.telegram_id,
                        to_user_id=order.user.telegram_id,
                        network="TON",
                        amount=order.crypto_amount,
                        token_address=None
                    )
                else:  # SELL
                    #  
                    await self.wallet_service.transfer_funds(
                        from_user_id=order.user.telegram_id,
                        to_user_id=order.taker.telegram_id,
                        network="TON",
                        amount=order.crypto_amount,
                        token_address=None
                    )
                order.status = P2POrderStatus.COMPLETED
            else:
                return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'}

            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–î–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id} —Ä–∞–∑—Ä–µ—à–µ–Ω. –†–µ—à–µ–Ω–∏–µ: {decision}",
                data={'order_id': order.id, 'decision': decision}
            )
            await self.notification_service.notify(
                user_id=order.taker.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–î–∏—Å–ø—É—Ç –ø–æ P2P –æ—Ä–¥–µ—Ä—É #{order.id} —Ä–∞–∑—Ä–µ—à–µ–Ω. –†–µ—à–µ–Ω–∏–µ: {decision}",
                data={'order_id': order.id, 'decision': decision}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–∏—Å–ø—É—Ç–∞: {str(e)}'}
        finally:
            session.close()  #

    async def get_advertisements(self, crypto: str, fiat: str, type: str) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        session = self.db.get_session()
        ads = session.query(P2PAdvertisement).filter(
            P2PAdvertisement.crypto_currency == crypto,
            P2PAdvertisement.fiat_currency == fiat,
            P2PAdvertisement.type == type,
            P2PAdvertisement.available == True
        ).all()
        
        return [{
            'id': ad.id,
            'user': ad.user.username,
            'price': ad.price,
            'min_amount': ad.min_amount,
            'max_amount': ad.max_amount,
            'payment_method': ad.payment_method.name
        } for ad in ads]

    async def create_p2p_order(self,
                             user_id: int,
                             order_type: str,  # "BUY" or "SELL"
                             crypto_amount: float,
                             fiat_amount: float,
                             fiat_currency: str,
                             payment_method: str,
                             limit_min: Optional[float] = None,
                             limit_max: Optional[float] = None,
                             time_limit: Optional[int] = None,
                             crypto_currency: str = "SOL") -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            return {'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if limit_min is not None and limit_max is not None and limit_min > limit_max:
            return {'success': False, 'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ'}

        if crypto_currency not in ("SOL", "TON", "USDT", "NOT"):
            return {'success': False, 'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'}

        try:
            order = P2POrder(
                user_id=user.id,
                type=order_type,
                crypto_amount=crypto_amount,
                fiat_amount=fiat_amount,
                fiat_currency=fiat_currency,
                payment_method=payment_method,
                limit_min=limit_min,
                limit_max=limit_max,
                time_limit=time_limit,
                status='OPEN',
                crypto_currency=crypto_currency
            )
            session.add(order)
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π P2P –æ—Ä–¥–µ—Ä #{order.id} ({order_type})",
                data={
                    'order_id': order.id,
                    'actions': [
                        {'text': 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'callback': f'p2p_view_{order.id}'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback': f'p2p_cancel_{order.id}'}
                    ]
                }
            )

            return {'success': True, 'order_id': order.id}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def find_matching_p2p_orders(self, side: str, base_currency: str, quote_currency: str,
                                       amount: float, payment_method: str) -> List[P2POrder]:
        """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ P2P –æ—Ä–¥–µ—Ä–∞."""
        session = self.db.get_session()
        opposite_side = "BUY" if side == "SELL" else "SELL"

        orders = session.query(P2POrder).filter(
            P2POrder.side == opposite_side,
            P2POrder.base_currency == base_currency,
            P2POrder.quote_currency == quote_currency,
            P2POrder.status == P2POrderStatus.OPEN,
            P2POrder.payment_method == payment_method,
            P2POrder.crypto_amount >= amount,  #  
            P2POrder.price <= amount  #  —Ü–µ–Ω—É
        ).all()
        return orders

    async def confirm_p2p_order(self, order_id: int, counterparty_order_id: int) -> Dict:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)
        counterparty_order = session.query(P2POrder).get(counterparty_order_id)

        if not order or not counterparty_order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != 'OPEN' or counterparty_order.status != 'OPEN':
            return {'success': False, 'error': '–û–¥–∏–Ω –∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            
        if order.type == counterparty_order.type:
            return {'success': False, 'error': "–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ä–¥–µ—Ä —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞"}

        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ WalletService)
            # ...

            order.status = 'CONFIRMED'
            counterparty_order.status = 'CONFIRMED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                data={'order_id': order.id}
            )
            await self.notification_service.notify(
                user_id=counterparty_order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{counterparty_order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                data={'order_id': counterparty_order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def complete_p2p_order(self, order_id: int) -> Dict:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç P2P –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        if order.status != 'CONFIRMED':
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}

        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ WalletService)
            # ...

            order.status = 'COMPLETED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'}

    async def cancel_p2p_order(self, order_id: int, user_id: int) -> Dict:
        """–û—Ç–º–µ–Ω—è–µ—Ç P2P –æ—Ä–¥–µ—Ä."""
        session = self.db.get_session()
        order = session.query(P2POrder).get(order_id)

        if not order:
            return {'success': False, 'error': '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        #   
        if order.user_id != user_id and order.taker_id != user_id:
            return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}

        if order.status not in ['OPEN', 'CONFIRMED']:
            return {'success': False, 'error': '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ –¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ'}

        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (TODO)
            # ...

            order.status = 'CANCELLED'
            session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notification_service.notify(
                user_id=order.user.telegram_id,
                notification_type=NotificationType.P2P_UPDATE,
                message=f"P2P –æ—Ä–¥–µ—Ä #{order.id} –æ—Ç–º–µ–Ω–µ–Ω",
                data={'order_id': order.id}
            )

            return {'success': True}

        except Exception as e:
            session.rollback()
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ P2P –æ—Ä–¥–µ—Ä–∞: {str(e)}'} 