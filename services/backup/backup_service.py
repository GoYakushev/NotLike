from aiogram import Bot
from datetime import datetime
import sqlite3
import json
import os
import asyncio
from services.backup.yadisk_service import YandexDiskService

class BackupService:
    def __init__(self, bot: Bot, yandex_token: str):
        self.bot = bot
        self.yandex_service = YandexDiskService(yandex_token)
        self.backup_interval = 3 * 60  # 3 –º–∏–Ω—É—Ç—ã
        
    async def start_backup_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        while True:
            await self.create_backup()
            await asyncio.sleep(self.backup_interval)
            
    async def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_path = f'backup_{timestamp}.db'
            
            # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            connection = sqlite3.connect('not_like.db')
            backup = sqlite3.connect(backup_path)
            with backup:
                connection.backup(backup)
            backup.close()
            connection.close()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            if self.yandex_service.upload_backup(backup_path):
                await self.bot.send_message(
                    config.ADMIN_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º config
                    f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {backup_path}"
                )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
                self.yandex_service.delete_old_backups()
            else:
                await self.bot.send_message(
                    config.ADMIN_ID,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(backup_path)
            
        except Exception as e:
            await self.bot.send_message(
                config.ADMIN_ID,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{str(e)}"
            )
            
    async def backup_critical_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        try:
            connection = sqlite3.connect('not_like.db')
            cursor = connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—à–µ–ª—å–∫–æ–≤
            cursor.execute("""
                SELECT users.*, wallets.address, wallets.private_key 
                FROM users 
                LEFT JOIN wallets ON users.id = wallets.user_id
            """)
            
            data = {
                'users': [],
                'timestamp': datetime.now().isoformat()
            }
            
            for row in cursor.fetchall():
                user_data = {
                    'telegram_id': row[1],
                    'username': row[2],
                    'wallets': [{
                        'address': row[-2],
                        'private_key': row[-1]
                    }] if row[-2] else []
                }
                data['users'].append(user_data)
                
            connection.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            backup_file = f'critical_data_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
            with open(backup_file, 'w') as f:
                json.dump(data, f, indent=2)
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(backup_file, 'rb') as f:
                await self.bot.send_document(
                    config.ADMIN_ID,
                    f,
                    caption="üîê –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
                
            os.remove(backup_file)
            
        except Exception as e:
            await self.bot.send_message(
                config.ADMIN_ID,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
            ) 