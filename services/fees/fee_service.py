from core.database.database import Database
from datetime import datetime, timedelta
from core.database.models import User, P2POrder, SpotOrder, SwapOrder, Transaction, FeeDiscount, FeeSettings, FeeTransaction, UserLevel
import json
from typing import Optional, Dict
import logging
from decimal import Decimal

logger = logging.getLogger(__name__)

class FeeService:
    def __init__(self, db: Database):
        self.logger = logging.getLogger(__name__)
        self.db = db
        self.base_fees = {
            'spot': {
                'maker': Decimal('0.001'),  # 0.1%
                'taker': Decimal('0.002')   # 0.2%
            },
            'p2p': {
                'maker': Decimal('0'),      # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –º–µ–π–∫–µ—Ä–∞
                'taker': Decimal('0.001')   # 0.1% –¥–ª—è —Ç–µ–π–∫–µ—Ä–∞
            },
            'swap': {
                'standard': Decimal('0.003') # 0.3%
            }
        }
        self.volume_tiers = [
            {
                'min_volume': Decimal('0'),
                'max_volume': Decimal('10000'),
                'maker_discount': Decimal('0'),
                'taker_discount': Decimal('0')
            },
            {
                'min_volume': Decimal('10000'),
                'max_volume': Decimal('50000'),
                'maker_discount': Decimal('0.1'),  # 10% —Å–∫–∏–¥–∫–∞
                'taker_discount': Decimal('0.05')  # 5% —Å–∫–∏–¥–∫–∞
            },
            {
                'min_volume': Decimal('50000'),
                'max_volume': Decimal('100000'),
                'maker_discount': Decimal('0.2'),  # 20% —Å–∫–∏–¥–∫–∞
                'taker_discount': Decimal('0.1')   # 10% —Å–∫–∏–¥–∫–∞
            },
            {
                'min_volume': Decimal('100000'),
                'max_volume': None,
                'maker_discount': Decimal('0.3'),  # 30% —Å–∫–∏–¥–∫–∞
                'taker_discount': Decimal('0.15')  # 15% —Å–∫–∏–¥–∫–∞
            }
        ]
        self.default_fee_rate = Decimal('0.001')  # 0.1%
        self.min_fee = Decimal('0.1')  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ USDT
        self.max_fee = Decimal('100')  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ USDT
        
    def get_current_fees(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        now = datetime.utcnow()
        weekday = now.weekday()
        
        fees = self.base_fees.copy()
        
        # –ü—è—Ç–Ω–∏—Ü–∞ (4) –∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (0) - P2P –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
        if weekday in [0, 4]:
            fees['p2p']['taker'] = Decimal('0')
            
        # –°—É–±–±–æ—Ç–∞ (5) –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6) - —Å–ø–æ—Ç —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π
        if weekday in [5, 6]:
            fees['spot']['taker'] = Decimal('0.001')  # 0.1%
            
        return fees
        
    def get_fee_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∏—Å—Å–∏—è—Ö"""
        now = datetime.utcnow()
        weekday = now.weekday()
        
        if weekday == 0:
            return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–µ–Ω—å —Ç—è–∂–µ–ª—ã–π... P2P —Ç–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏! üéâ"
        elif weekday == 4:
            return "–¢—Ä—É–¥–Ω—ã–π –¥–µ–Ω—å... –∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ! P2P —Ç–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏! üéâ"
        elif weekday in [5, 6]:
            return "–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ —Å–ø–æ—Ç–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ 0.1%! üéâ"
            
        return None 

    async def calculate_fee(
        self,
        user_id: int,
        amount: Decimal,
        operation_type: str,
        network: str
    ) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π
            settings = await FeeSettings.get(network=network)
            if not settings:
                return {
                    'success': False,
                    'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                }

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_level = await UserLevel.get(user_id=user_id)
            if not user_level:
                user_level = await UserLevel(
                    user_id=user_id,
                    level=1,
                    created_at=datetime.utcnow()
                ).save()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∫–æ–º–∏—Å—Å–∏–∏
            base_rate = getattr(settings, f"{operation_type}_fee", self.default_fee_rate)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            level_discount = Decimal('0.1') * (user_level.level - 1)  # 10% —Å–∫–∏–¥–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
            fee_rate = base_rate * (1 - level_discount)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            fee_amount = amount * fee_rate

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            fee_amount = max(min(fee_amount, self.max_fee), self.min_fee)

            return {
                'success': True,
                'fee_amount': float(fee_amount),
                'fee_rate': float(fee_rate),
                'base_rate': float(base_rate),
                'level_discount': float(level_discount)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def apply_fee(
        self,
        user_id: int,
        amount: Decimal,
        operation_type: str,
        network: str,
        transaction_id: Optional[str] = None
    ) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            fee_result = await self.calculate_fee(
                user_id=user_id,
                amount=amount,
                operation_type=operation_type,
                network=network
            )

            if not fee_result['success']:
                return fee_result

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–º–∏—Å—Å–∏–∏
            fee_tx = FeeTransaction(
                user_id=user_id,
                amount=Decimal(str(fee_result['fee_amount'])),
                operation_type=operation_type,
                network=network,
                transaction_id=transaction_id,
                fee_rate=Decimal(str(fee_result['fee_rate'])),
                created_at=datetime.utcnow()
            )
            await fee_tx.save()

            return {
                'success': True,
                'fee_transaction_id': fee_tx.id,
                'fee_amount': float(fee_tx.amount),
                'total_amount': float(amount + fee_tx.amount)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_fee_history(
        self,
        user_id: int,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        limit: int = 50,
        offset: int = 0
    ) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            query = FeeTransaction.filter(user_id=user_id)
            if start_date:
                query = query.filter(created_at__gte=start_date)
            if end_date:
                query = query.filter(created_at__lte=end_date)

            transactions = await query.order_by('-created_at').offset(offset).limit(limit).all()
            result = []

            for tx in transactions:
                result.append({
                    'id': tx.id,
                    'amount': float(tx.amount),
                    'operation_type': tx.operation_type,
                    'network': tx.network,
                    'transaction_id': tx.transaction_id,
                    'fee_rate': float(tx.fee_rate),
                    'created_at': tx.created_at.isoformat()
                })

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–π
            total_fees = sum(tx.amount for tx in transactions)

            return {
                'success': True,
                'transactions': result,
                'total_fees': float(total_fees)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∏—Å—Å–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def update_fee_settings(
        self,
        network: str,
        settings: Dict
    ) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π."""
        try:
            fee_settings = await FeeSettings.get(network=network)
            if not fee_settings:
                fee_settings = FeeSettings(network=network)

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in settings.items():
                if hasattr(fee_settings, key):
                    setattr(fee_settings, key, Decimal(str(value)))

            await fee_settings.save()

            return {
                'success': True,
                'settings': {
                    'network': fee_settings.network,
                    'swap_fee': float(fee_settings.swap_fee),
                    'transfer_fee': float(fee_settings.transfer_fee),
                    'withdrawal_fee': float(fee_settings.withdrawal_fee)
                }
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∏—Å—Å–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_fee_settings(self, network: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π."""
        try:
            settings = await FeeSettings.get(network=network)
            if not settings:
                return {
                    'success': False,
                    'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                }

            return {
                'success': True,
                'settings': {
                    'network': settings.network,
                    'swap_fee': float(settings.swap_fee),
                    'transfer_fee': float(settings.transfer_fee),
                    'withdrawal_fee': float(settings.withdrawal_fee)
                }
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∏—Å—Å–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_fee_stats(
        self,
        period: str = 'day'
    ) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∏—Å—Å–∏–π."""
        try:
            now = datetime.utcnow()
            if period == 'day':
                start_date = now - timedelta(days=1)
            elif period == 'week':
                start_date = now - timedelta(weeks=1)
            elif period == 'month':
                start_date = now - timedelta(days=30)
            else:
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                }

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            transactions = await FeeTransaction.filter(
                created_at__gte=start_date
            ).all()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
            stats = {}
            for tx in transactions:
                if tx.operation_type not in stats:
                    stats[tx.operation_type] = {
                        'count': 0,
                        'total_amount': Decimal('0')
                    }
                stats[tx.operation_type]['count'] += 1
                stats[tx.operation_type]['total_amount'] += tx.amount

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {}
            for op_type, data in stats.items():
                result[op_type] = {
                    'count': data['count'],
                    'total_amount': float(data['total_amount']),
                    'average_amount': float(data['total_amount'] / data['count']) if data['count'] > 0 else 0
                }

            return {
                'success': True,
                'period': period,
                'stats': result,
                'total_fees': float(sum(tx.amount for tx in transactions))
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    def _get_base_fee(self, operation_type: str, role: str) -> Decimal:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        if operation_type not in self.base_fees:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
            
        if operation_type == 'swap':
            return self.base_fees[operation_type]['standard']
            
        if role not in ['maker', 'taker']:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–æ–ª—å: {role}")
            
        return self.base_fees[operation_type][role]

    async def _get_volume_discount(
        self,
        session,
        user_id: int,
        role: str
    ) -> Decimal:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–∏–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤."""
        volume = await self._calculate_trading_volume(session, user_id)
        
        for tier in self.volume_tiers:
            if (tier['min_volume'] <= volume and
                (tier['max_volume'] is None or volume < tier['max_volume'])):
                return (
                    tier['maker_discount']
                    if role == 'maker'
                    else tier['taker_discount']
                )
        
        return Decimal('0')

    async def _get_user_discount(
        self,
        session,
        user_id: int
    ) -> Decimal:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        discounts = session.query(FeeDiscount).filter(
            FeeDiscount.user_id == user_id,
            (
                FeeDiscount.expiration_date.is_(None) |
                (FeeDiscount.expiration_date > datetime.utcnow())
            )
        ).all()
        
        total_discount = Decimal('0')
        for discount in discounts:
            total_discount += discount.discount_value
            
        return min(total_discount, Decimal('0.8'))  # –ú–∞–∫—Å–∏–º—É–º 80% —Å–∫–∏–¥–∫–∏

    async def _calculate_trading_volume(
        self,
        session,
        user_id: int,
        days: int = 30
    ) -> Decimal:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        start_date = datetime.utcnow() - timedelta(days=days)
        
        transactions = session.query(Transaction).filter(
            Transaction.user_id == user_id,
            Transaction.created_at >= start_date,
            Transaction.status == 'completed',
            Transaction.type.in_(['buy', 'sell'])
        ).all()
        
        return sum(tx.amount for tx in transactions)

    async def apply_fee_discount(
        self,
        user_id: int,
        discount_type: str,
        discount_value: Decimal,
        expiration_days: Optional[int] = None
    ) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            session = self.db.get_session()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∏–¥–∫–∏
                existing_discount = session.query(FeeDiscount).filter_by(
                    user_id=user_id,
                    discount_type=discount_type
                ).first()

                if existing_discount:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∫–∏–¥–∫—É
                    existing_discount.discount_value = discount_value
                    if expiration_days:
                        existing_discount.expiration_date = (
                            datetime.utcnow() + timedelta(days=expiration_days)
                        )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É
                    new_discount = FeeDiscount(
                        user_id=user_id,
                        discount_type=discount_type,
                        discount_value=discount_value,
                        expiration_date=(
                            datetime.utcnow() + timedelta(days=expiration_days)
                            if expiration_days else None
                        )
                    )
                    session.add(new_discount)

                session.commit()
                return True

            finally:
                session.close()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–∫–∏–¥–∫–∏: {str(e)}")
            return False

    async def get_user_fee_info(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            session = self.db.get_session()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                volume = await self._calculate_trading_volume(
                    session,
                    user_id,
                    days=30
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏—Ä
                current_tier = None
                for tier in self.volume_tiers:
                    if (tier['min_volume'] <= volume and
                        (tier['max_volume'] is None or volume < tier['max_volume'])):
                        current_tier = tier
                        break

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏
                discounts = session.query(FeeDiscount).filter(
                    FeeDiscount.user_id == user_id,
                    (
                        FeeDiscount.expiration_date.is_(None) |
                        (FeeDiscount.expiration_date > datetime.utcnow())
                    )
                ).all()

                return {
                    'trading_volume_30d': float(volume),
                    'current_tier': {
                        'min_volume': float(current_tier['min_volume']),
                        'max_volume': float(current_tier['max_volume']) if current_tier['max_volume'] else None,
                        'maker_discount': float(current_tier['maker_discount']),
                        'taker_discount': float(current_tier['taker_discount'])
                    } if current_tier else None,
                    'active_discounts': [{
                        'type': d.discount_type,
                        'value': float(d.discount_value),
                        'expires_at': d.expiration_date.isoformat() if d.expiration_date else None
                    } for d in discounts],
                    'base_fees': {
                        k: {
                            sk: float(sv) for sk, sv in v.items()
                        } for k, v in self.base_fees.items()
                    }
                }

            finally:
                session.close()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö: {str(e)}")
            raise 