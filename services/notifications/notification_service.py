from aiogram import Bot, types
from core.database.models import User, NotificationSettings, Notification
from core.database.database import Database
from typing import Optional, List, Dict
import asyncio
import json
from datetime import datetime
from enum import Enum
import logging
from services.telegram.telegram_service import TelegramService

class NotificationType(Enum):
    TRADE = "trade"
    PRICE_ALERT = "price_alert"
    SYSTEM = "system"
    SECURITY = "security"
    WALLET = "wallet"

class NotificationPriority(Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self, telegram_service: TelegramService):
        self.telegram_service = telegram_service
        self.db = Database()
        self._notification_queue = asyncio.Queue()
        self._is_running = False
        self._price_alerts = {}  # user_id -> List[alert_config]
        self._notification_history = {}  # user_id -> List[notification]
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._is_running = True
        asyncio.create_task(self._process_queue())
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        self._is_running = False
        
    async def send_notification(
        self,
        user_id: int,
        message: str,
        notification_type: str = 'info',
        data: Optional[Dict] = None,
        is_important: bool = False
    ) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = await NotificationSettings.get(user_id=user_id)
            if not settings:
                settings = NotificationSettings(
                    user_id=user_id,
                    enabled=True,
                    trade_notifications=True,
                    price_alerts=True,
                    security_alerts=True,
                    news_updates=True,
                    sound_enabled=True,
                    quiet_hours_start=23,
                    quiet_hours_end=7
                )
                await settings.save()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not settings.enabled and not is_important:
                return {
                    'success': False,
                    'error': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            current_hour = datetime.utcnow().hour
            is_quiet_time = (
                current_hour >= settings.quiet_hours_start or
                current_hour < settings.quiet_hours_end
            )
            if is_quiet_time and not is_important:
                return {
                    'success': False,
                    'error': '–¢–∏—Ö–∏–µ —á–∞—Å—ã'
                }

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            notification = Notification(
                user_id=user_id,
                type=notification_type,
                message=message,
                data=data,
                is_important=is_important,
                created_at=datetime.utcnow(),
                is_read=False
            )
            await notification.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            await self.telegram_service.send_message(
                chat_id=user_id,
                text=message,
                disable_notification=is_quiet_time and not is_important
            )

            return {
                'success': True,
                'notification_id': notification.id
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def send_trade_notification(
        self,
        user_id: int,
        trade_type: str,
        amount: float,
        token_symbol: str,
        price: float,
        tx_hash: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ."""
        data = {
            "trade_type": trade_type,
            "amount": amount,
            "token_symbol": token_symbol,
            "price": price,
            "tx_hash": tx_hash,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        message = (
            f"{'üü¢ –ü–æ–∫—É–ø–∫–∞' if trade_type == 'buy' else 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'}\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} {token_symbol}\n"
            f"–¶–µ–Ω–∞: ${price:.4f}\n"
            f"–•—ç—à: {tx_hash[:8]}...{tx_hash[-8:]}"
        )
        
        return await self.send_notification(
            user_id,
            message,
            NotificationType.TRADE.value,
            NotificationPriority.HIGH.value,
            data
        )

    async def send_price_alert(
        self,
        user_id: int,
        token_symbol: str,
        current_price: float,
        target_price: float,
        condition: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã."""
        data = {
            "token_symbol": token_symbol,
            "current_price": current_price,
            "target_price": target_price,
            "condition": condition,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        message = (
            f"‚ö†Ô∏è –¶–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç - {token_symbol}\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}\n"
            f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:.4f}\n"
            f"–£—Å–ª–æ–≤–∏–µ: {'–≤—ã—à–µ' if condition == 'above' else '–Ω–∏–∂–µ'}"
        )
        
        return await self.send_notification(
            user_id,
            message,
            NotificationType.PRICE_ALERT.value,
            NotificationPriority.HIGH.value,
            data
        )

    async def send_security_alert(
        self,
        user_id: int,
        alert_type: str,
        details: str,
        recommendation: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        data = {
            "alert_type": alert_type,
            "details": details,
            "recommendation": recommendation,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        message = (
            f"üö® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
            f"–¢–∏–ø: {alert_type}\n"
            f"–î–µ—Ç–∞–ª–∏: {details}\n"
            f"{f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}' if recommendation else ''}"
        )
        
        return await self.send_notification(
            user_id,
            message,
            NotificationType.SECURITY.value,
            NotificationPriority.CRITICAL.value,
            data
        )

    async def send_wallet_notification(
        self,
        user_id: int,
        operation_type: str,
        amount: float,
        token_symbol: str,
        status: str,
        tx_hash: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –∫–æ—à–µ–ª—å–∫–æ–º."""
        data = {
            "operation_type": operation_type,
            "amount": amount,
            "token_symbol": token_symbol,
            "status": status,
            "tx_hash": tx_hash,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        message = (
            f"üíº –û–ø–µ—Ä–∞—Ü–∏—è —Å –∫–æ—à–µ–ª—å–∫–æ–º\n\n"
            f"–¢–∏–ø: {operation_type}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} {token_symbol}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"{f'–•—ç—à: {tx_hash[:8]}...{tx_hash[-8:]}' if tx_hash else ''}"
        )
        
        return await self.send_notification(
            user_id,
            message,
            NotificationType.WALLET.value,
            NotificationPriority.HIGH.value,
            data
        )

    async def set_price_alert(
        self,
        user_id: int,
        token_symbol: str,
        target_price: float,
        condition: str
    ) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ."""
        try:
            if user_id not in self._price_alerts:
                self._price_alerts[user_id] = []
                
            alert_config = {
                "token_symbol": token_symbol,
                "target_price": target_price,
                "condition": condition,
                "created_at": datetime.utcnow().isoformat()
            }
            
            self._price_alerts[user_id].append(alert_config)
            
            await self.send_notification(
                user_id,
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç –¥–ª—è {token_symbol}\n"
                f"–¶–µ–ª—å: ${target_price:.4f}\n"
                f"–£—Å–ª–æ–≤–∏–µ: {'–≤—ã—à–µ' if condition == 'above' else '–Ω–∏–∂–µ'}",
                NotificationType.SYSTEM.value,
                NotificationPriority.LOW.value
            )
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
            return False

    def get_user_alerts(self, user_id: int) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self._price_alerts.get(user_id, [])

    def get_notification_history(
        self,
        user_id: int,
        notification_type: Optional[NotificationType] = None,
        limit: int = 50
    ) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        history = self._notification_history.get(user_id, [])
        
        if notification_type:
            history = [
                n for n in history 
                if n['type'] == notification_type.value
            ]
            
        return sorted(
            history,
            key=lambda x: x['timestamp'],
            reverse=True
        )[:limit]

    def _format_notification(
        self,
        message: str,
        notification_type: NotificationType,
        priority: NotificationPriority,
        data: Optional[Dict]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
        priority_icons = {
            NotificationPriority.LOW: "‚ÑπÔ∏è",
            NotificationPriority.MEDIUM: "‚ö†Ô∏è",
            NotificationPriority.HIGH: "‚ùóÔ∏è",
            NotificationPriority.CRITICAL: "üö®"
        }
        
        type_headers = {
            NotificationType.TRADE: "üìä –¢–æ—Ä–≥–æ–≤–ª—è",
            NotificationType.PRICE_ALERT: "üí∞ –¶–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç",
            NotificationType.SYSTEM: "ü§ñ –°–∏—Å—Ç–µ–º–∞",
            NotificationType.SECURITY: "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            NotificationType.WALLET: "üíº –ö–æ—à–µ–ª–µ–∫"
        }
        
        formatted_message = (
            f"{priority_icons[priority]} {type_headers[notification_type]}\n\n"
            f"{message}\n\n"
            f"üïí {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}"
        )
        
        return formatted_message

    def _save_to_history(
        self,
        user_id: int,
        notification_type: NotificationType,
        priority: NotificationPriority,
        message: str,
        data: Optional[Dict]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        if user_id not in self._notification_history:
            self._notification_history[user_id] = []
            
        notification = {
            "type": notification_type.value,
            "priority": priority.value,
            "message": message,
            "data": data,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        self._notification_history[user_id].append(notification)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if len(self._notification_history[user_id]) > 1000:
            self._notification_history[user_id] = self._notification_history[user_id][-1000:]
        
    async def _process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self._is_running:
            try:
                notification = await self._notification_queue.get()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
                for channel in notification['channels']:
                    if channel == 'telegram':
                        await self._send_telegram(notification)
                    elif channel == 'email':
                        await self._send_email(notification)
                        
                self._notification_queue.task_done()
                
            except Exception as e:
                print(f"Error processing notification: {e}")
                await asyncio.sleep(1)
                
    async def _send_telegram(self, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            message = self._format_message(notification)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            keyboard = self._get_action_keyboard(notification)
            
            await self.telegram_service.send_message(
                chat_id=notification['user_id'],
                text=message,
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            
    async def _send_email(self, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
        pass
        
    def _format_message(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        type_icons = {
            NotificationType.PRICE_ALERT: "üìà",
            NotificationType.ORDER_UPDATE: "üìä",
            NotificationType.P2P_UPDATE: "üë•",
            NotificationType.WALLET_TRANSFER: "üí≥",
            NotificationType.SWAP_STATUS: "üîÑ",
            NotificationType.SECURITY_ALERT: "üîí",
            NotificationType.SYSTEM_UPDATE: "‚öôÔ∏è",
            NotificationType.PREMIUM_STATUS: "‚≠êÔ∏è"
        }
        
        icon = type_icons.get(notification['type'], "‚ÑπÔ∏è")
        return f"{icon} {notification['message']}"
        
    def _get_action_keyboard(self, notification: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        if not notification.get('data', {}).get('actions'):
            return None
            
        keyboard = types.InlineKeyboardMarkup()
        
        for action in notification['data']['actions']:
            keyboard.add(types.InlineKeyboardButton(
                action['text'],
                callback_data=action['callback']
            ))
            
        return keyboard 

    async def mark_as_read(
        self,
        notification_id: int,
        user_id: int
    ) -> Dict:
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ."""
        try:
            notification = await Notification.get(id=notification_id)
            if not notification:
                return {
                    'success': False,
                    'error': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                }

            if notification.user_id != user_id:
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é'
                }

            notification.is_read = True
            notification.read_at = datetime.utcnow()
            await notification.save()

            return {
                'success': True
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_user_notifications(
        self,
        user_id: int,
        limit: int = 50,
        offset: int = 0,
        unread_only: bool = False
    ) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            query = Notification.filter(user_id=user_id)
            if unread_only:
                query = query.filter(is_read=False)

            notifications = await query.order_by('-created_at').offset(offset).limit(limit).all()
            result = []

            for notification in notifications:
                result.append({
                    'id': notification.id,
                    'type': notification.type,
                    'message': notification.message,
                    'data': notification.data,
                    'is_important': notification.is_important,
                    'is_read': notification.is_read,
                    'created_at': notification.created_at.isoformat(),
                    'read_at': notification.read_at.isoformat() if notification.read_at else None
                })

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return []

    async def update_notification_settings(
        self,
        user_id: int,
        settings: Dict
    ) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_settings = await NotificationSettings.get(user_id=user_id)
            if not user_settings:
                user_settings = NotificationSettings(user_id=user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in settings.items():
                if hasattr(user_settings, key):
                    setattr(user_settings, key, value)

            await user_settings.save()

            return {
                'success': True,
                'settings': {
                    'enabled': user_settings.enabled,
                    'trade_notifications': user_settings.trade_notifications,
                    'price_alerts': user_settings.price_alerts,
                    'security_alerts': user_settings.security_alerts,
                    'news_updates': user_settings.news_updates,
                    'sound_enabled': user_settings.sound_enabled,
                    'quiet_hours_start': user_settings.quiet_hours_start,
                    'quiet_hours_end': user_settings.quiet_hours_end
                }
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_notification_settings(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            settings = await NotificationSettings.get(user_id=user_id)
            if not settings:
                return {
                    'success': True,
                    'settings': {
                        'enabled': True,
                        'trade_notifications': True,
                        'price_alerts': True,
                        'security_alerts': True,
                        'news_updates': True,
                        'sound_enabled': True,
                        'quiet_hours_start': 23,
                        'quiet_hours_end': 7
                    }
                }

            return {
                'success': True,
                'settings': {
                    'enabled': settings.enabled,
                    'trade_notifications': settings.trade_notifications,
                    'price_alerts': settings.price_alerts,
                    'security_alerts': settings.security_alerts,
                    'news_updates': settings.news_updates,
                    'sound_enabled': settings.sound_enabled,
                    'quiet_hours_start': settings.quiet_hours_start,
                    'quiet_hours_end': settings.quiet_hours_end
                }
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def delete_notification(
        self,
        notification_id: int,
        user_id: int
    ) -> Dict:
        """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        try:
            notification = await Notification.get(id=notification_id)
            if not notification:
                return {
                    'success': False,
                    'error': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                }

            if notification.user_id != user_id:
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é'
                }

            await notification.delete()

            return {
                'success': True
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def clear_notifications(
        self,
        user_id: int,
        older_than: Optional[datetime] = None
    ) -> Dict:
        """–û—á–∏—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            query = Notification.filter(user_id=user_id)
            if older_than:
                query = query.filter(created_at__lt=older_than)

            await query.delete()

            return {
                'success': True
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def send_broadcast(
        self,
        message: str,
        user_ids: Optional[List[int]] = None,
        notification_type: str = 'broadcast',
        data: Optional[Dict] = None,
        is_important: bool = False
    ) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        try:
            if user_ids is None:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await User.all()
                user_ids = [user.id for user in users]

            success_count = 0
            failed_count = 0

            for user_id in user_ids:
                result = await self.send_notification(
                    user_id=user_id,
                    message=message,
                    notification_type=notification_type,
                    data=data,
                    is_important=is_important
                )
                if result['success']:
                    success_count += 1
                else:
                    failed_count += 1

            return {
                'success': True,
                'total': len(user_ids),
                'success_count': success_count,
                'failed_count': failed_count
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_unread_count(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            count = await Notification.filter(
                user_id=user_id,
                is_read=False
            ).count()

            return {
                'success': True,
                'count': count
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            } 