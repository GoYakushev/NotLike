from aiogram import Bot, types
from core.database.models import User, NotificationSettings
from core.database.database import Database
from typing import Optional, List, Dict
import asyncio
import json

class NotificationType:
    PRICE_ALERT = "price_alert"
    ORDER_UPDATE = "order_update"
    P2P_UPDATE = "p2p_update"
    WALLET_TRANSFER = "wallet_transfer"
    SWAP_STATUS = "swap_status"
    SECURITY_ALERT = "security_alert"
    SYSTEM_UPDATE = "system_update"
    PREMIUM_STATUS = "premium_status"

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self._notification_queue = asyncio.Queue()
        self._is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._is_running = True
        asyncio.create_task(self._process_queue())
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        self._is_running = False
        
    async def send_notification(self, user_id: int, title: str, message: str, notification_type: str = "SYSTEM", data: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        session = self.db.get_session()
        user = session.query(User).filter_by(telegram_id=user_id).first()

        if not user:
            return False

        try:
            #  –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            settings = session.query(NotificationSettings).filter_by(user_id=user.id).first()
            if not settings:
                #  –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (  )
                settings = NotificationSettings(user_id=user.id, settings=json.dumps({
                    notification_type: {'enabled': True, 'channels': ['telegram']}  #  Telegram
                }))
                session.add(settings)
                session.commit()

            if not settings.is_enabled(notification_type):
                return True  #  

            channels = settings.get_channels(notification_type)

            #  —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            formatted_message = self._format_notification(
                {'type': notification_type, 'message': message, 'data': data or {}}
            )
            keyboard = self._get_action_keyboard(
                {'type': notification_type, 'message': message, 'data': data or {}}
            )

            if 'telegram' in channels:
                try:
                    await self.bot.send_message(user.telegram_id, formatted_message, reply_markup=keyboard)
                except Exception as e:
                    print(f"Error sending Telegram notification: {e}")
                    #  –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã,  Telegram

            if 'email' in channels:
                #  email (  )
                pass

            return True

        except Exception as e:
            print(f"Error sending notification: {e}")
            return False
        finally:
            session.close()

    async def notify(self, user_id: int, notification_type: str, message: str, data: Optional[Dict] = None):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        #  send_notification,    
        await self.send_notification(user_id, "", message, notification_type, data)

    async def send_price_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã."""
        session = self.db.get_session()
        alerts = session.query(PriceAlert).filter_by(is_triggered=False).all()

        for alert in alerts:
            current_price = await self.get_current_price(alert.token.symbol)

            if (alert.condition == "ABOVE" and current_price >= alert.price) or \
               (alert.condition == "BELOW" and current_price <= alert.price):

                await self.send_notification(
                    alert.user.telegram_id,
                    "üîî –¶–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç",
                    f"–¶–µ–Ω–∞ {alert.token.symbol} {'–¥–æ—Å—Ç–∏–≥–ª–∞' if alert.condition == 'ABOVE' else '—É–ø–∞–ª–∞ –¥–æ'} "
                    f"${current_price:.2f}",
                    "PRICE_ALERT"
                )

                alert.is_triggered = True

        session.commit()

    async def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
        #  —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã (  API,  )
        return 10.0

    def _format_notification(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        type_icons = {
            NotificationType.PRICE_ALERT: "üîî",
            NotificationType.ORDER_UPDATE: "üîÑ",
            NotificationType.P2P_UPDATE: "ü§ù",
            NotificationType.WALLET_TRANSFER: "üí∞",
            NotificationType.SWAP_STATUS: "üîÑ",
            NotificationType.SECURITY_ALERT: "üîí",
            NotificationType.SYSTEM_UPDATE: "‚öôÔ∏è",
            NotificationType.PREMIUM_STATUS: "‚≠êÔ∏è"
        }

        icon = type_icons.get(notification['type'], "‚ÑπÔ∏è")
        return f"{icon} {notification['message']}"

    def _get_action_keyboard(self, notification: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        if not notification.get('data', {}).get('actions'):
            return None

        keyboard = types.InlineKeyboardMarkup()

        for action in notification['data']['actions']:
            keyboard.add(types.InlineKeyboardButton(
                action['text'],
                callback_data=action['callback']
            ))

        return keyboard
        
    async def _process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self._is_running:
            try:
                notification = await self._notification_queue.get()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
                for channel in notification['channels']:
                    if channel == 'telegram':
                        await self._send_telegram(notification)
                    elif channel == 'email':
                        await self._send_email(notification)
                        
                self._notification_queue.task_done()
                
            except Exception as e:
                print(f"Error processing notification: {e}")
                await asyncio.sleep(1)
                
    async def _send_telegram(self, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            message = self._format_message(notification)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            keyboard = self._get_action_keyboard(notification)
            
            await self.bot.send_message(
                notification['user_id'],
                message,
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error sending Telegram notification: {e}")
            
    async def _send_email(self, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
        pass
        
    def _format_message(self, notification: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        type_icons = {
            NotificationType.PRICE_ALERT: "üìà",
            NotificationType.ORDER_UPDATE: "üìä",
            NotificationType.P2P_UPDATE: "üë•",
            NotificationType.WALLET_TRANSFER: "üí≥",
            NotificationType.SWAP_STATUS: "üîÑ",
            NotificationType.SECURITY_ALERT: "üîí",
            NotificationType.SYSTEM_UPDATE: "‚öôÔ∏è",
            NotificationType.PREMIUM_STATUS: "‚≠êÔ∏è"
        }
        
        icon = type_icons.get(notification['type'], "‚ÑπÔ∏è")
        return f"{icon} {notification['message']}"
        
    def _get_action_keyboard(self, notification: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        if not notification.get('data', {}).get('actions'):
            return None
            
        keyboard = types.InlineKeyboardMarkup()
        
        for action in notification['data']['actions']:
            keyboard.add(types.InlineKeyboardButton(
                action['text'],
                callback_data=action['callback']
            ))
            
        return keyboard 